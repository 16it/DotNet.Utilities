<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNet4.Framework.Data</name>
    </assembly>
    <members>
        <member name="T:YanZhiwei.DotNet4.Framework.Data.DbContextBase">
            <summary>
            DAL基类，实现Repository通用泛型数据访问模式
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.DbContextBase.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">连接字符串</param>
            时间：2016-01-14 10:57
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.DbContextBase.#ctor(System.String,YanZhiwei.DotNet.Framework.Contract.IAuditable)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="auditLogger">IAuditable</param>
            时间：2016-01-14 10:58
            备注：
        </member>
        <member name="P:YanZhiwei.DotNet4.Framework.Data.DbContextBase.AuditLogger">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.DbContextBase.Delete``1(``0)">
            <summary>
            删除
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="entity">实体类</param>
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.DbContextBase.ExecuteSqlCommand(System.String,System.Boolean,System.Nullable{System.Int32},System.Object[])">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">Sql书</param>
            <param name="doNotEnsureTransaction">是否启用事务，默认不启用</param>
            <param name="timeout">超时时间</param>
            <param name="parameters">参数</param>
            <returns>影响行数</returns>
            时间：2016-01-29 11:11
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.DbContextBase.ExecuteStoredProcedureList``1(System.String,System.Object[])">
            <summary>
            执行存储过程返回集合
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="commandText">存储过程名称</param>
            <param name="parameters">存储过程参数</param>
            <returns>集合</returns>
            时间：2016-01-29 11:08
            备注：
            <exception cref="T:System.ArgumentException">不支持的参数类型！</exception>
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.DbContextBase.Find``1(System.Object[])">
            <summary>
            查找
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="keyValues">查询依据的键</param>
            <returns>
            实体类
            </returns>
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.DbContextBase.FindAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            查找全部
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="conditions">委托.</param>
            <returns>
            集合
            </returns>
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.DbContextBase.FindAllByPage``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32,System.Int32)">
            <summary>
            分页查找
            </summary>
            <typeparam name="T">泛型</typeparam>
            <typeparam name="S">泛型</typeparam>
            <param name="conditions">查找条件</param>
            <param name="orderBy">排序</param>
            <param name="pageSize">分页大小</param>
            <param name="pageIndex">分页集合</param>
            <returns>PagedList</returns>
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.DbContextBase.Insert``1(``0)">
            <summary>
            添加
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="entity">实体类</param>
            <returns>
            实体类
            </returns>
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.DbContextBase.SaveChanges">
            <summary>
            将在此上下文中所做的所有更改保存到基础数据库。
            </summary>
            <returns>
            已写入基础数据库的对象的数目。
            </returns>
            时间：2016-01-14 10:59
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.DbContextBase.SqlQuery``1(System.String,System.Object[])">
            <summary>
            Sql语句查询
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameters">参数</param>
            <returns>IEnumerable</returns>
            时间：2016-01-29 11:09
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.DbContextBase.Update``1(``0)">
            <summary>
            更新
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="entity">实体类</param>
            <returns>
            实体类
            </returns>
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.DbContextBase.WriteAuditLog">
            <summary>
            日志拦截写入
            </summary>
            时间：2016-01-29 11:07
            备注：
        </member>
        <member name="T:YanZhiwei.DotNet4.Framework.Data.EfContextBase">
            <summary>
            DAL基类，通用泛型数据访问模式
            </summary>
            时间：2016-01-29 14:07
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.EfContextBase.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">连接字符串</param>
            时间：2016-01-29 13:58
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.EfContextBase.Set``1">
            <summary>
            隐藏基类Set方法
            </summary>
            <typeparam name="T">泛型</typeparam>
            <returns>IDbSet</returns>
            时间：2016-01-29 11:07
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.EfContextBase.ExecuteSqlCommand(System.String,System.Boolean,System.Nullable{System.Int32},System.Object[])">
            <summary>
            执行sql语句
            </summary>
            <param name="sql">Sql书</param>
            <param name="doNotEnsureTransaction">是否启用事务，默认不启用</param>
            <param name="timeout">超时时间</param>
            <param name="parameters">参数</param>
            <returns>影响行数</returns>
            时间：2016-01-29 11:11
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.EfContextBase.ExecuteStoredProcedureList``1(System.String,System.Object[])">
            <summary>
            执行存储过程返回集合
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="commandText">存储过程名称</param>
            <param name="parameters">存储过程参数</param>
            <returns>集合</returns>
            时间：2016-01-29 11:08
            备注：
            <exception cref="T:System.ArgumentException">不支持的参数类型！</exception>
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.EfContextBase.SqlQuery``1(System.String,System.Object[])">
            <summary>
            Sql语句查询
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameters">参数</param>
            <returns>IEnumerable</returns>
            时间：2016-01-29 11:09
            备注：
        </member>
        <member name="T:YanZhiwei.DotNet4.Framework.Data.EfRepository`1">
            <summary>
            EF存储仓实现
            </summary>
            <typeparam name="T">泛型</typeparam>
            时间：2016-01-28 14:18
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.EfRepository`1.#ctor(YanZhiwei.DotNet4.Framework.Data.IDbContext)">
            <summary>
            构造函数
            </summary>
            <param name="context">IDbContext</param>
            时间：2016-01-29 13:43
            备注：
        </member>
        <member name="P:YanZhiwei.DotNet4.Framework.Data.EfRepository`1.Table">
            <summary>
            获取实体类没有跟踪
            </summary>
            <value>IQueryable</value>
        </member>
        <member name="P:YanZhiwei.DotNet4.Framework.Data.EfRepository`1.TableNoTracking">
            <summary>
            获取实体类没有跟踪
            <para>
            AsNoTracking是无跟踪查询, 有时我们的实体只需要显示，无需更新，所以为了提高性能，我们不需要实体被EF追踪。此时可以使用AsNoTracking的查询来得到实体，这样实体的状态是Detached状态。这样可以提高性能，但是如果取到数据后，要对数据做修改并保存，则无法反映到数据库里。另外如果对通过AsNoTracking，得到的数据做删除处理，还会报错。
            </para>
            </summary>
            <value>
            IQueryable
            </value>
        </member>
        <member name="P:YanZhiwei.DotNet4.Framework.Data.EfRepository`1.Entities">
            <summary>
            获取IDbSet
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.EfRepository`1.Delete(`0)">
            <summary>
            删除
            </summary>
            <param name="entity">实体类</param>
            时间：2016-01-29 13:42
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.EfRepository`1.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            删除集合
            </summary>
            <param name="entities">集合</param>
            时间：2016-01-29 13:42
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.EfRepository`1.GetById(System.Object)">
            <summary>
            根据主键查找
            </summary>
            <param name="id">主键ID</param>
            <returns></returns>
            时间：2016-01-29 13:41
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.EfRepository`1.Insert(`0)">
            <summary>
            插入
            </summary>
            <param name="entity">实体类</param>
            时间：2016-01-29 13:41
            备注：
        </member>
        <!-- Badly formed XML comment ignored for member "M:YanZhiwei.DotNet4.Framework.Data.EfRepository`1.Insert(System.Collections.Generic.IEnumerable{`0})" -->
        <member name="M:YanZhiwei.DotNet4.Framework.Data.EfRepository`1.Update(`0)">
            <summary>
            更新
            </summary>
            <param name="entity">实体类</param>
            时间：2016-01-29 13:40
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.EfRepository`1.GetException(System.Data.Entity.Validation.DbEntityValidationException)">
            <summary>
            重新构建异常对象
            </summary>
            <param name="dbEx">DbEntityValidationException</param>
            时间：2016-01-29 13:37
            备注：
            <exception cref="T:System.Exception">DbEntityValidationException</exception>
        </member>
        <member name="T:YanZhiwei.DotNet4.Framework.Data.IDataRepository">
            <summary>
            仓储接口
            </summary>
            时间：2016-01-06 17:09
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.IDataRepository.Delete``1(``0)">
            <summary>
            删除
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="entity">实体类</param>
            时间：2016-01-13 13:31
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.IDataRepository.Find``1(System.Object[])">
            <summary>
            查找
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="keyValues">删除依据的键</param>
            <returns>实体类</returns>
            时间：2016-01-13 13:32
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.IDataRepository.FindAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            查找全部
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="conditions">委托.</param>
            <returns>集合</returns>
            时间：2016-01-13 13:32
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.IDataRepository.FindAllByPage``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32,System.Int32)">
            <summary>
            分页查找
            </summary>
            <typeparam name="T">泛型</typeparam>
            <typeparam name="S">泛型</typeparam>
            <param name="conditions">查找条件</param>
            <param name="orderBy">排序</param>
            <param name="pageSize">分页大小</param>
            <param name="pageIndex">分页集合</param>
            <returns>PagedList</returns>
            时间：2016-01-13 13:33
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.IDataRepository.Insert``1(``0)">
            <summary>
            添加
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="entity">实体类</param>
            <returns>实体类</returns>
            时间：2016-01-13 13:31
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.IDataRepository.Update``1(``0)">
            <summary>
            更新
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="entity">实体类</param>
            <returns>实体类</returns>
            时间：2016-01-13 13:31
            备注：
        </member>
        <member name="T:YanZhiwei.DotNet4.Framework.Data.IDbContext">
            <summary>
            IDbContext接口
            </summary>
            时间：2016-01-29 13:26
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.IDbContext.SaveChanges">
            <summary>
            保存更改
            </summary>
            <returns>影响行数</returns>
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.IDbContext.ExecuteStoredProcedureList``1(System.String,System.Object[])">
            <summary>
            执行存储过程，并返回对象列表
            </summary>
            <typeparam name="TEntity">泛型</typeparam>
            <param name="commandText">存储过程名称</param>
            <param name="parameters">存储过程参数</param>
            <returns>集合</returns>
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.IDbContext.SqlQuery``1(System.String,System.Object[])">
            <summary>
            查询Sql语句
            </summary>
            <typeparam name="TEntity">泛型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parameters">参数</param>
            <returns>集合</returns>
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.IDbContext.ExecuteSqlCommand(System.String,System.Boolean,System.Nullable{System.Int32},System.Object[])">
            <summary>
            执行sql 是否启用事务
            </summary>
            <param name="sql">sql语句</param>
            <param name="doNotEnsureTransaction">是否启用事物</param>
            <param name="timeout">超时时间</param>
            <param name="parameters">参数</param>
            <returns>影响行数</returns>
        </member>
        <member name="T:YanZhiwei.DotNet4.Framework.Data.IDependency">
            <summary>
            依赖注入接口，表示该接口的实现类将自动注册到IoC容器中
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet4.Framework.Data.IRepository`1">
            <summary>
            仓储接口
            </summary>
            <typeparam name="T">泛型</typeparam>
            时间：2016-01-28 14:06
            备注：
        </member>
        <member name="P:YanZhiwei.DotNet4.Framework.Data.IRepository`1.Table">
            <summary>
            获取实体类
            </summary>
            <value>IQueryable</value>
        </member>
        <member name="P:YanZhiwei.DotNet4.Framework.Data.IRepository`1.TableNoTracking">
            <summary>
            获取实体类没有跟踪
            <para>
            AsNoTracking是无跟踪查询, 有时我们的实体只需要显示，无需更新，所以为了提高性能，我们不需要实体被EF追踪。此时可以使用AsNoTracking的查询来得到实体，这样实体的状态是Detached状态。这样可以提高性能，但是如果取到数据后，要对数据做修改并保存，则无法反映到数据库里。另外如果对通过AsNoTracking，得到的数据做删除处理，还会报错。
            </para>
            </summary>
            <value>IQueryable</value>
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.IRepository`1.Delete(`0)">
            <summary>
            删除
            </summary>
            <param name="entity">实体类</param>
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.IRepository`1.GetById(System.Object)">
            <summary>
            根据主键获取
            </summary>
            <param name="id">主键</param>
            <returns>泛型</returns>
            时间：2016-01-28 14:05
            备注：
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.IRepository`1.Insert(`0)">
            <summary>
            添加
            </summary>
            <param name="entity">实体类</param>
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.IRepository`1.Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            添加集合
            </summary>
            <param name="entities">集合</param>
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.IRepository`1.Update(`0)">
            <summary>
            更新
            </summary>
            <param name="entity">实体类</param>
        </member>
        <member name="T:YanZhiwei.DotNet4.Framework.Data.IUnitOfWork">
            <summary>
            业务单元操作接口
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet4.Framework.Data.IUnitOfWork.TransactionEnabled">
            <summary>
            获取或设置 是否开启事务提交
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.IUnitOfWork.SaveChanges">
            <summary>
            提交当前单元操作的更改。
            </summary>
            <returns>操作影响的行数</returns>
        </member>
        <member name="M:YanZhiwei.DotNet4.Framework.Data.IUnitOfWork.SaveChangesAsync">
            <summary>
            异步提交当前单元操作的更改。
            </summary>
            <returns>操作影响的行数</returns>
        </member>
    </members>
</doc>
