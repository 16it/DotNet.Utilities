<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNet2.Utilities</name>
    </assembly>
    <members>
        <member name="T:YanZhiwei.DotNet2.Utilities.AspNet.CacheHelper">
            <summary>
            缓存帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.CacheHelper.Get(System.String)">
            <summary>
            获取缓存内容
            </summary>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.CacheHelper.Set(System.String,System.Object)">
            <summary>
            设置缓存
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.CacheHelper.Set(System.String,System.Object,System.Web.Caching.CacheDependency)">
            <summary>
            设置缓存
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="cacheDependency">所插入对象的文件依赖项或缓存键依赖项。当任何依赖项更改时，该对象即无效，并从缓存中移除。如果没有依赖项，则此参数包含 nullNothingnullptrnull 引用。</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.CacheHelper.Set(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime)">
            <summary>
            设置缓存
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="cacheDependency">所插入对象的文件依赖项或缓存键依赖项。当任何依赖项更改时，该对象即无效，并从缓存中移除。如果没有依赖项，则此参数包含 nullNothingnullptrnull 引用</param>
            <param name="dt">所插入对象将过期并被从缓存中移除的时间。若要避免可能出现的本地时间方面的问题（如从标准时间更改为夏时制），请对此参数值使用 UtcNow，不要使用 Now。如果使用绝对过期，则 slidingExpiration 参数必须为 NoSlidingExpiration</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.CacheHelper.Set(System.String,System.Object,System.Web.Caching.CacheDependency,System.TimeSpan)">
            <summary>
            设置缓存
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="cacheDependency">所插入对象的文件依赖项或缓存键依赖项。当任何依赖项更改时，该对象即无效，并从缓存中移除。如果没有依赖项，则此参数包含 nullNothingnullptrnull 引用</param>
            <param name="ts">最后一次访问所插入对象时与该对象过期时之间的时间间隔。如果该值等效于 20 分钟，则对象在最后一次被访问 20 分钟之后将过期并被从缓存中移除。如果使用可调过期，则 absoluteExpiration 参数必须为 NoAbsoluteExpiration。</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.CacheHelper.Set(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan)">
            <summary>
            设置缓存
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="cacheDependency">所插入对象的文件依赖项或缓存键依赖项。当任何依赖项更改时，该对象即无效，并从缓存中移除。如果没有依赖项，则此参数包含 nullNothingnullptrnull 引用</param>
            <param name="dt">所插入对象将过期并被从缓存中移除的时间。若要避免可能出现的本地时间方面的问题（如从标准时间更改为夏时制），请对此参数值使用 UtcNow，不要使用 Now。如果使用绝对过期，则 slidingExpiration 参数必须为 NoSlidingExpiration</param>
            <param name="ts">最后一次访问所插入对象时与该对象过期时之间的时间间隔。如果该值等效于 20 分钟，则对象在最后一次被访问 20 分钟之后将过期并被从缓存中移除。如果使用可调过期，则 absoluteExpiration 参数必须为 NoAbsoluteExpiration。</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.CacheHelper.Set(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
            设置缓存
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="cacheDependency">该项的文件依赖项或缓存键依赖项。当任何依赖项更改时，该对象即无效，并从缓存中移除。如果没有依赖项，则此参数包含 null。</param>
            <param name="absoluteExpiration">所插入对象将过期并被从缓存中移除的时间。若要避免可能出现的本地时间方面的问题（如从标准时间更改为夏时制），请对此参数值使用 UtcNow，不要使用 Now。如果使用绝对过期，则 slidingExpiration 参数必须为 NoSlidingExpiration</param>
            <param name="slidingExpiration">最后一次访问所插入对象时与该对象到期时之间的时间间隔。如果该值等效于 20 分钟，则对象在最后一次被访问 20 分钟之后将到期并被从缓存中移除。如果使用可调到期，则 absoluteExpiration 参数必须为 NoAbsoluteExpiration。</param>
            <param name="onUpdate">在从缓存中移除对象时将调用的委托（如果提供）。当从缓存中删除应用程序的对象时，可使用它来通知应用程序。</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.CacheHelper.Set(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
            设置缓存
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="cacheDependency">该项的文件依赖项或缓存键依赖项。当任何依赖项更改时，该对象即无效，并从缓存中移除。如果没有依赖项，则此参数包含 null。</param>
            <param name="absoluteExpiration">所插入对象将过期并被从缓存中移除的时间。若要避免可能出现的本地时间方面的问题（如从标准时间更改为夏时制），请对此参数值使用 UtcNow，不要使用 Now。如果使用绝对过期，则 slidingExpiration 参数必须为 NoSlidingExpiration</param>
            <param name="slidingExpiration">最后一次访问所插入对象时与该对象到期时之间的时间间隔。如果该值等效于 20 分钟，则对象在最后一次被访问 20 分钟之后将到期并被从缓存中移除。如果使用可调到期，则 absoluteExpiration 参数必须为 NoAbsoluteExpiration。</param>
            <param name="priority">优先级</param>
            <param name="onUpdate">在从缓存中移除对象时将调用的委托（如果提供）。当从缓存中删除应用程序的对象时，可使用它来通知应用程序。</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.CacheHelper.Remove(System.String)">
            <summary>
            清除缓存
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.CacheHelper.Contain(System.String)">
            <summary>
            是否已缓存
            </summary>
            <param name="key">键</param>
            <returns>是否已缓存</returns>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.AspNet.CacheHelper.Cache">
            <summary>
            Cache对象
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.AspNet.CacheHelper.AppPrefix">
            <summary>
            AppPrefix
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.AspNet.CookieHelper">
            <summary>
            cookie 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.CookieHelper.ClearCookie(System.String)">
            <summary>
            清除指定Cookie
            </summary>
            <param name="cookiename">cookiename</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.CookieHelper.GetCookieValue(System.String)">
            <summary>
            获取指定Cookie值
            </summary>
            <param name="cookiename">cookiename</param>
            <returns></returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.CookieHelper.SetCookie(System.String,System.String)">
            <summary>
            添加一个Cookie（24小时过期）
            </summary>
            <param name="cookiename">键</param>
            <param name="cookievalue">值</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.CookieHelper.SetCookie(System.String,System.String,System.DateTime)">
            <summary>
            设置cookie
            </summary>
            <param name="cookiename">键</param>
            <param name="cookievalue">值</param>
            <param name="expires">过期时间 DateTime</param>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.AspNet.DownloadFileHelper">
            <summary>
            下载文件帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.DownloadFileHelper.DownloadSvrFile(System.String)">
            <summary>
            下载普通文件
            </summary>
            <param name="fileName">文件路径</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.DownloadFileHelper.DownLoadBigFile(System.String)">
            <summary>
            下载大文件
            </summary>
            <param name="fullpath">文件路径</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.DownloadFileHelper.ResponseFile(System.Web.HttpRequest,System.Web.HttpResponse,System.String,System.String,System.Int64)">
            <summary>
             输出硬盘文件，提供下载 支持大文件、续传、速度限制、资源占用小
            </summary>
            <param name="_Request">Page.Request对象</param>
            <param name="_Response">Page.Response对象</param>
            <param name="_fileName">下载文件名</param>
            <param name="_fullPath">带文件名下载路径</param>
            <param name="_speed">每秒允许下载的字节数</param>
            <returns>返回是否成功</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.AspNet.FormsAuthenHelper">
            <summary>
            Form验证帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.FormsAuthenHelper.CreateAuthenticationTicketTool(System.String,System.String,System.Boolean,System.String)">
            <summary>
            创建验证票据
            </summary>
            <param name="userName">与身份验证票关联的用户名。</param>
            <param name="userData">将存储在 Cookie 中的用户定义数据</param>
            <param name="createPersistentCookie">如果 Cookie 是持久的，为 true；否则为 false。</param>
            <param name="cookiePath">存储 Forms 身份验证票证信息的 Cookie 的路径。默认值是“/”。</param>
            <returns>FormsAuthenticationTicket</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.FormsAuthenHelper.SetAuthCookie(System.String,System.String,System.Boolean)">
            <summary>
            设置登录Cookie凭证
            </summary>
            <param name="userName">用户名称</param>
            <param name="userData">用户数据</param>
            <param name="createPersistentCookie">是否是持久cookie</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.FormsAuthenHelper.SetAuthCookie(System.String,System.String,System.Boolean,System.String)">
            <summary>
            设置登录Cookie凭证
            </summary>
            <param name="userName">用户名称</param>
            <param name="userData">用户数据</param>
            <param name="createPersistentCookie">是否是持久cookie</param>
            <param name="cookiePath">cookie路径</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.FormsAuthenHelper.RedirectFromLoginPage(System.String,System.String,System.Boolean,System.String)">
            <summary>
            从登录页面跳转
            </summary>
            <param name="userName">用户名称</param>
            <param name="userData">用户数据</param>
            <param name="createPersistentCookie">是否是持久cookie</param>
            <param name="cookiePath">cookie路径</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.FormsAuthenHelper.RedirectFromLoginPage(System.String,System.String,System.Boolean)">
            <summary>
            从登录页面跳转
            </summary>
            <param name="userName">用户名称</param>
            <param name="userData">用户数据</param>
            <param name="createPersistentCookie">是否是持久cookie</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.FormsAuthenHelper.GetCookieTimeout">
            <summary>
            获取cookie超时时间
            </summary>
            <returns>超时时间</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.FormsAuthenHelper.InitRolesToUser(System.Func{System.String,System.String[]})">
            <summary>
            用户权限初始化 在 Application_AuthenticateRequest()中使用
            </summary>
            <param name="assignRoleRule">委托</param>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.AspNet.GridViewHelper">
            <summary>
             GridView 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.GridViewHelper.ToExcel(System.Web.UI.WebControls.GridView,System.String)">
            <summary>
            将GridView导出到EXCEL
            </summary>
            <param name="girdview">GridView</param>
            <param name="fileName">导出到的文件名称</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.GridViewHelper.GridView2DataTable(System.Web.UI.WebControls.GridView)">
            <summary>
            从GridView的数据生成DataTable
            </summary>
            <param name="gv">GridView对象</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.GridViewHelper.GetCellText(System.Web.UI.WebControls.TableCell)">
            <summary>
            获取单元格内容
            </summary>
            <param name="cell">TableCell</param>
            <returns>内容</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.GridViewHelper.SetCellText(System.Web.UI.WebControls.TableCell,System.Int32)">
            <summary>
            设置单元格内容
            </summary>
            <param name="cell">TableCell</param>
            <param name="maxLen">最大长度</param>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.AspNet.HTMLHelper">
            <summary>
            HTML帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.HTMLHelper.GetHtml(System.String,System.String,System.Boolean,System.Net.CookieContainer)">
            <summary>
            获取HTML
            </summary>
            <param name="url">地址</param>
            <param name="postData">post 提交的字符串</param>
            <param name="isPost">是否是post</param>
            <param name="cookieContainer">CookieContainer</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.HTMLHelper.GetHtml(System.String,System.Net.CookieContainer)">
            <summary>
            获取HTML
            </summary>
            <param name="url">地址</param>
            <param name="cookieContainer">CookieContainer</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.HTMLHelper.GetStream(System.String,System.Net.CookieContainer)">
            <summary>
            获取字符流
            </summary>
            <param name="url">地址</param>
            <param name="cookieContainer">cookieContainer</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.HTMLHelper.NoHTML(System.String)">
            <summary>
            清除HTML标记
            </summary>
            <param name="Htmlstring">包括HTML的源码</param>
            <returns>已经去除后的文字</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.HTMLHelper.GetHref(System.String)">
            <summary>
            获取页面的链接正则
            </summary>
            <param name="HtmlCode">html Code</param>
            <returns>获取页面的链接</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.HTMLHelper.GetImgSrc(System.String,System.String)">
            <summary>
            匹配页面的图片地址
            </summary>
            <param name="HtmlCode">HtmlCode</param>
            <param name="imgHttp">要补充的http://路径信息</param>
            <returns>图片地址</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.HTMLHelper.GetImg(System.String,System.String)">
            <summary>
            匹配<img src="" />中的图片路径实际链接
            </summary>
            <param name="ImgString"><img src="" />字符串</param>
            <param name="imgHttp"></param>
            <returns>图片路径实际链接</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.HTMLHelper.Get_Http(System.String)">
            <summary>
            以GET方式抓取远程页面内容
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.HTMLHelper.Post_Http(System.String,System.String,System.String)">
            <summary>
            以POST方式抓取远程页面内容
            </summary>
            <param name="url">链接</param>
            <param name="postData">post数据</param>
            <param name="encodeType">编码类型</param>
            <returns>远程页面内容</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.HTMLHelper.ZipHtml(System.String)">
            <summary>
            压缩HTML输出
            </summary>
            <param name="Html">html</param>
            <returns>压缩的HTML</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.HTMLHelper.FilterHtml(System.String,System.String)">
            <summary>
            过滤指定HTML标签
            </summary>
            <param name="textStr">要过滤的字符</param>
            <param name="htmlLable">a img p div</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.HTMLHelper.LoadFile(System.String,System.Web.UI.Page)">
            <summary>
            加载文件块
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.HTMLHelper.LoadCSS(System.String,System.Web.UI.Page)">
            <summary>
            加载CSS样式文件
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.HTMLHelper.LoadJS(System.String,System.Web.UI.Page)">
            <summary>
            加载javascript脚本文件
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.AspNet.HTMLHelper.CookieContainer">
            <summary>
            Cookie
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.AspNet.HTMLHelper.Encoding">
            <summary>
            语言
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.AspNet.HTMLHelper.NetworkDelay">
            <summary>
            网络延迟
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.AspNet.HTMLHelper.MaxTry">
            <summary>
            尝试次数
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.AspNet.HttpWebRequestHelper">
            <summary>
            HttpWebRequest 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.HttpWebRequestHelper.CreateHttpWebRequest(System.String,System.Byte[],System.Func{System.String,System.Net.HttpWebRequest})">
            <summary>
            发起HttpWebResponse请求
            </summary>
            <param name="url">请求连接</param>
            <param name="credentials">请求参数</param>
            <param name="httpWebRequestRule">请求设置『委托』，当委托等于NULL的时候，默认请求；否则使用所设置的HttpWebRequest</param>
            <returns>HttpWebResponse</returns>
        </member>
        <!-- 对于成员“M:YanZhiwei.DotNet2.Utilities.AspNet.HttpWebRequestHelper.CreateCredentials(System.Collections.Generic.IDictionary{System.String,System.String},System.Text.Encoding)”忽略有格式错误的 XML 注释 -->
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.HttpWebRequestHelper.GetHtmlSource(System.String,System.Text.Encoding)">
            <summary>
            获取网页HTML源码
            </summary>
            <param name="url">链接 eg:http://www.baidu.com/ </param>
            <param name="charset">编码 eg:Encoding.UTF8</param>
            <returns>HTML源码</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.AspNet.FileHelper">
            <summary>
            文件帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.FileHelper.GetPath(System.String)">
            <summary>
            获取文件相对路径映射的物理路径
            </summary>
            <param name="virtualPath">文件的相对路径</param>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.AspNet.JavaScriptHelper">
            <summary>
            JavaScript 操作类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.JavaScriptHelper.RegisterScriptBlock(System.Web.UI.Page,System.String)">
            <summary>
            输出自定义脚本信息
            </summary>
            <param name="page">当前页面指针，一般为this</param>
            <param name="script">输出脚本</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.JavaScriptHelper.CloseWindow">
            <summary>
            关闭当前窗口
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.JavaScriptHelper.RefreshParent(System.String)">
            <summary>
            刷新父窗口
            </summary>
            <param name="url">父窗口链接</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.JavaScriptHelper.RefreshOpener">
            <summary>
            刷新打开窗口
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.JavaScriptHelper.JavaScriptLocationHref(System.String)">
            <summary>
            转向Url指定的页面
            </summary>
            <param name="url">连接地址</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.JavaScriptHelper.ShowModalDialogWindow(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            打开指定大小位置的模式对话框
            </summary>
            <param name="webFormUrl">连接地址</param>
            <param name="width">宽</param>
            <param name="height">高</param>
            <param name="top">距离上位置</param>
            <param name="left">距离左位置</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.JavaScriptHelper.ShowModalDialogWindow(System.String,System.String)">
            <summary>
            打开模式对话框
            </summary>
            <param name="webFormUrl">链接地址</param>
            <param name="features"></param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.JavaScriptHelper.ShowModalDialogJavascript(System.String,System.String)">
            <summary>
            打开模式对话框
            </summary>
            <param name="webFormUrl"></param>
            <param name="features"></param>
            <returns></returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.JavaScriptHelper.OpenWebFormSize(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            打开指定大小的新窗体
            </summary>
            <param name="url">地址</param>
            <param name="width">宽</param>
            <param name="heigth">高</param>
            <param name="top">头位置</param>
            <param name="left">左位置</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.JavaScriptHelper.JavaScriptExitIfream(System.String)">
            <summary>
            页面跳转（跳出框架）
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.JavaScriptHelper.AlertThenRedirect(System.String,System.String)">
            <summary>
            弹出信息,并跳转指定页面。
            </summary>
            <param name="message">弹出信息</param>
            <param name="toURL">跳转链接</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.JavaScriptHelper.AlertThenGoHistory(System.String,System.Int32)">
            <summary>
            弹出信息,并返回历史页面
            </summary>
            <param name="message">信息</param>
            <param name="value">历史</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.JavaScriptHelper.Redirect(System.String)">
            <summary>
            直接跳转到指定的页面
            </summary>
            <param name="toUrl">跳转链接</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.JavaScriptHelper.AlertThenParentUrl(System.String,System.String)">
            <summary>
            弹出信息 并指定到父窗口
            </summary>
            <param name="message">弹出信息</param>
            <param name="toURL">父窗口链接</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.JavaScriptHelper.ParentRedirect(System.String)">
            <summary>
            返回到父窗口
            </summary>
            <param name="ToUrl">父窗体链接</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.JavaScriptHelper.BackHistory(System.Int32)">
            <summary>
            返回历史页面
            </summary>
            <param name="value">历史</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.JavaScriptHelper.Alert(System.String)">
            <summary>
            弹出信息
            </summary>
            <param name="message">信息</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.LinkButtonHelper.Confirm(System.Web.UI.WebControls.LinkButton,System.String)">
            <summary>
            为LinkButton添加确认窗口
            </summary>
            <param name="linkbutton">LinkButton</param>
            <param name="message">确认窗口文字信息</param>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.AspNet.NetWorkHelper">
            <summary>
            NetWork 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.NetWorkHelper.GetUserIp">
            <summary>
            获得用户IP
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.AspNet.PageHelper">
            <summary>
            Page 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.PageHelper.LockPage(System.Web.UI.Page,System.Object[])">
            <summary>
            锁定页面上的一些组件
            </summary>
            <param name="page">Page</param>
            <param name="unlockCtrl">不要锁定的控件</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.PageHelper.UnLockPage(System.Web.UI.Page,System.Object[])">
            <summary>
            解除锁定页面上的一些组件
            </summary>
            <param name="page">Page</param>
            <param name="lockCtrl">锁定的控件</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.PageHelper.GetCurrentPage">
            <summary>
            得到当前页对象实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.PageHelper.GetQueryString(System.String)">
            <summary>
            读取QueryString值
            </summary>
            <param name="queryStringName">QueryString名称</param>
            <returns>QueryString值</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.PageHelper.Redirect(System.String)">
            <summary>
            页面跳转
            </summary>
            <param name="url">URL地址</param>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.AspNet.SessionHelper">
            <summary>
            session 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.SessionHelper.GetSession(System.String)">
            <summary>
            根据session名获取session对象
            </summary>
            <param name="name">键</param>
            <returns>值</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.SessionHelper.SetSession(System.String,System.Object)">
            <summary>
            设置session
            </summary>
            <param name="name">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.SessionHelper.Add(System.String,System.String)">
            <summary>
            添加Session，调动有效期为20分钟
            </summary>
            <param name="name">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.SessionHelper.Adds(System.String,System.String[])">
            <summary>
            添加Session，调动有效期为20分钟
            </summary>
            <param name="sessionName">键</param>
            <param name="sessionValues">值</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.SessionHelper.Add(System.String,System.String,System.Int32)">
            <summary>
            添加Session
            </summary>
            <param name="sessionName">Session对象名称</param>
            <param name="sessionValue">Session值</param>
            <param name="iExpires">调动有效期（分钟）</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.SessionHelper.Adds(System.String,System.String[],System.Int32)">
            <summary>
            添加Session
            </summary>
            <param name="sessionName">Session对象名称</param>
            <param name="sessionValues">Session值数组</param>
            <param name="iExpires">调动有效期（分钟）</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.SessionHelper.Get(System.String)">
            <summary>
            读取某个Session对象值
            </summary>
            <param name="sessionName">Session对象名称</param>
            <returns>Session对象值</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.SessionHelper.Gets(System.String)">
            <summary>
            读取某个Session对象值数组
            </summary>
            <param name="sessionName">Session对象名称</param>
            <returns>Session对象值数组</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.SessionHelper.Del(System.String)">
            <summary>
            删除某个Session对象
            </summary>
            <param name="sessionName">Session对象名称</param>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.AspNet.UrlHelper">
             <summary>
            URL 帮助类
             </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.UrlHelper.EncodeUrl(System.String)">
            <summary>
            编码链接
            </summary>
            <param name="url">链接</param>
            <returns>编码后的链接</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.UrlHelper.DecodeUrl(System.String)">
            <summary>
            解码链接
            </summary>
            <param name="url">链接</param>
            <returns>解码后的链接</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.UrlHelper.Base64Encrypt(System.String,System.Text.Encoding)">
            <summary>
            URL的64位编码
            </summary>
            <param name="url">链接</param>
            <param name="encoding">URL的64位编码</param>
            <returns>Encoding</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.UrlHelper.Base64Decrypt(System.String,System.Text.Encoding)">
            <summary>
            URL的64位解码
            </summary>
            <param name="base64String">base64字符串</param>
            <param name="encoding">Encoding</param>
            <returns>链接</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.UrlHelper.IsBase64(System.String)">
            <summary>
            是否是Base64字符串
            </summary>
            <param name="base64String">base64字符串</param>
            <returns>是否是Base64字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.UrlHelper.AddUrlParameters(System.String,System.String,System.String)">
            <summary>
            添加URL参数
            </summary>
            <param name="url">URL链接</param>
            <param name="paramName">参数名称</param>
            <param name="value">参数值</param>
            <returns>添加参数后URL</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.AspNet.UrlHelper.UpdateUrlParameters(System.String,System.String,System.String)">
            <summary>
            更新URL参数
            </summary>
            <param name="url">URL链接</param>
            <param name="paramName">参数名称</param>
            <param name="value">参数值</param>
            <returns>更新参数后URL</returns>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.AspNet.UrlHelper.BaseUrl">
            <summary>
            获取网站链接
            eg:http://www.lh.com
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.AspNet.UrlHelper.SiteUrl">
             <summary>
            获取网站链接路径
            eg:http://www.lh.com/123.aspx
             </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.BDGCJLatLonHelper">
            <summary>
            火星坐标系 (GCJ-02)与百度坐标系 (BD-09) 转换帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.BDGCJLatLonHelper.GCJ02ToBD09(YanZhiwei.DotNet2.Utilities.Models.LatLngPoint)">
            <summary>
            将GCJ-02坐标转换成BD-09坐标
            </summary>
            <param name="gcjPoint">GCJ-02坐标</param>
            <returns>BD-09坐标</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.BDGCJLatLonHelper.BD09ToGCJ02(YanZhiwei.DotNet2.Utilities.Models.LatLngPoint)">
            <summary>
            将BD-09坐标转换成GCJ-02坐标
            </summary>
            <param name="bdPoint">BD-09坐标</param>
            <returns>GCJ-02坐标</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.CheckHelper">
            <summary>
            检查 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.CheckHelper.IsBool(System.Object)">
            <summary>
            是否是布尔类型
            </summary>
            <param name="data">数据</param>
            <returns>布尔类型</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.ConfigHelper">
             <summary>
            App.config 帮助类
             </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ConfigHelper.GetAppSettingsValue(System.String)">
            <summary>
            AppSetting根据KEY获取对应的值
            </summary>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ConfigHelper.UpdateAppSettings(System.String,System.String)">
            <summary>
            修改AppSettings键值，若键不存在，则添加键值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>是否修改成功</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.ArrayHelper">
             <summary>
            Array 帮助类
             </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ArrayHelper.Copy``1(``0[],System.Int32,System.Int32)">
            <summary>
            数组复制（截取）
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="source">需要截取的数组</param>
            <param name="startIndex">开始截取位置，从零开始</param>
            <param name="endIndex">截取位置</param>
            <returns>截取的新数组</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ArrayHelper.Equals``1(``0[],``0[])">
            <summary>
            比较两个数组内容是否一样
            </summary>
            <param name="source">源数组</param>
            <param name="compare">比较的数组</param>
            <returns>相等返回TRUE;不相等返回FALSE</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ArrayHelper.Insert``1(``0[],``0,System.Int32)">
            <summary>
            按位插入数组
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="source">需要插入的数组</param>
            <param name="t">翻新</param>
            <param name="index">需要插入的索引，从0开始</param>
            <returns>更新后的数组</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ArrayHelper.IsNullOrEmpty(System.Array)">
            <summary>
            判断Array是否NULL或者空
            </summary>
            <param name="source">Array</param>
            <returns>是否NULL或者空</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ArrayHelper.Add``1(``0[],``0)">
            <summary>
            Array添加
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="array">Array</param>
            <param name="item">需要添加项</param>
            <returns>返回新的Array</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ArrayHelper.AddRange``1(``0[],``0[])">
            <summary>
             Array添加
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="sourceArray">Array</param>
            <param name="addArray">Array</param>
            <returns>返回新的Array</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.BindList`1">
             <summary>
             双向绑定帮助类
            <para>参考:</para>
            <para> http://blogs.msdn.com/b/winformsue/archive/2007/12/06/filtering-code.aspx </para>
            <para> http://blogs.msdn.com/b/winformsue/archive/2007/12/07/implementing-the-ibindinglistview-for-filtering.aspx </para>
            <para> http://www.codeproject.com/Articles/19867/How-To-Allow-To-Sort-By-Multiple-Columns-in-Custom </para>
            <para> http://msdn.microsoft.com/zh-cn/library/ms993236.aspx </para>
            <para> http://www.codeproject.com/Articles/37671/Databinding-BindingList-BindingSource-and-Busine </para>
            <para> http://www.dotblogs.com.tw/yc421206/archive/2013/09/03/116162.aspx </para>
             </summary>
             <typeparam name="T">泛型</typeparam>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.BindList`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.BindList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            构造函数
            </summary>
            <param name="List"></param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.BindList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            构造函数
            </summary>
            <param name="Enumerable"></param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.BindList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            重写ApplySortCore方法
            </summary>
            <param name="property">PropertyDescriptor</param>
            <param name="sortDirection">ListSortDirection</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.BindList`1.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
            <summary>
            应用排序
            </summary>
            <param name="sorts">ListSortDescriptionCollection</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.BindList`1.RemoveFilter">
            <summary>
            移除筛选
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.BindList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            重写FindCore方法
            </summary>
            <param name="prop">PropertyDescriptor</param>
            <param name="key">object</param>
            <returns>符合条数</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.BindList`1.FindCore(System.Int32,System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
             重写FindCore方法
            </summary>
            <param name="startIndex">开始索引</param>
            <param name="prop">PropertyDescriptor</param>
            <param name="key">object</param>
            <returns>符合条数</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.BindList`1.Find(System.Predicate{`0})">
            <summary>
            查找对象
            </summary>
            <param name="match">委托</param>
            <returns>泛型</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.BindList`1.Find(System.Int32,System.String,System.Object)">
            <summary>
            查找对象
            </summary>
            <param name="startIndex">索引开始数</param>
            <param name="property">属性名称</param>
            <param name="key">属性值</param>
            <returns>查找到符合记录</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.BindList`1.FindAll(System.Predicate{`0})">
            <summary>
            查找符合记录集合
            </summary>
            <param name="match">委托</param>
            <returns>符合条件的集合</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.BindList`1.Remove(System.Predicate{`0})">
            <summary>
            移除对象
            </summary>
            <param name="match">委托</param>
            <returns>移除记录条数</returns>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Common.BindList`1.SortDescriptions">
            <summary>
            ListSortDescriptionCollection
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Common.BindList`1.SupportsAdvancedSorting">
            <summary>
            SupportsAdvancedSorting
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Common.BindList`1.IsSortedCore">
            <summary>
            IsSortedCore
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Common.BindList`1.UnfilteredList">
            <summary>
            未筛选集合
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Common.BindList`1.Filter">
            <summary>
            筛选表达式字符串
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Common.BindList`1.FilterPropertyName">
            <summary>
            属性筛选
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Common.BindList`1.FilterCompare">
            <summary>
            FilterCompare
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Common.BindList`1.SupportsFiltering">
            <summary>
            是否支持筛选
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.ByteHelper">
             <summary>
            byte 帮助类
             </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.MaxValueToPercent(System.Decimal,System.Int32)">
            <summary>
            某数除在255所占百分比
            </summary>
            <param name="value">数字，需要小于255</param>
            <param name="dot">保留位数</param>
            <returns>百分比</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.ToHexString(System.Byte[],YanZhiwei.DotNet2.Utilities.Enums.ToHexadecimal)">
            <summary>
            将byte数组转换成十六进制字符串
            </summary>
            <param name="bytes">byte数组</param>
            <param name="type">转换类型枚举</param>
            <returns>十六进制字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.ToHexStringWithBlank(System.Byte[])">
            <summary>
            将byte数组转换成十六进制字符串_保留空格
            </summary>
            <param name="bytes">byte数组</param>
            <returns>十六进制字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.ToHexStrWithDelimiter(System.Byte[],System.String)">
            <summary>
            将byte数组转换成十六进制字符串_自定义间隔符号
            </summary>
            <param name="bytes">byte数组</param>
            <param name="delimiter">自定义间隔符号</param>
            <returns>十六进制字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.ConvertHexString(System.String)">
            <summary>
            将十六进制字符串转换成byte数组
            </summary>
            <param name="hex">十六进制字符串</param>
            <returns>byte数组</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.ConvertHexStringWithDelimiter(System.String,System.String)">
            <summary>
            将16进制字符串(ex: E4 CA B2) 转换成字节数组;可自定义分隔符"-" 例如00-03-00-B2-04-E6-CF
            </summary>
            <param name="hex">十六进制字符串</param>
            <param name="delimiter">自定义分隔符</param>
            <returns>byte数组</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.DTToBytesLen7(System.DateTime)">
            <summary>
            根据DateTime 返回7个字节的数组(yyyyMMddHHmmss)
            </summary>
            <param name="dt">DateTime</param>
            <returns>byte数组</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.DTToBytesLen6(System.DateTime)">
            <summary>
            根据DateTime 返回六个字节的数组(yyyyMMddHHmm)
            </summary>
            <param name="dt">DateTime</param>
            <returns>byte数组</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.DTToBytesLen4(System.DateTime)">
             <summary>
             将时间类型转换成四个长度的byte数组
            <para>eg:2012/05/13==>{0x20,0x12,0x05,0x13}</para>
             </summary>
             <param name="dt">DateTime</param>
             <returns>byte数组</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.TimeToBytesLen2(System.String)">
             <summary>
             将时间转换为两个长度的byte数组
            <para>eg:17：46==>{0x17,0x46}</para>
             </summary>
             <param name="time">eg: 17:46</param>
             <returns>byte[]</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.DTToBytesLen7Inverted(System.DateTime)">
            <summary>
            根据DateTime 返回7个字节的数组(ssmmHHMMYYYY)
            </summary>
            <param name="dt">DateTime</param>
            <returns>Byte[]</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.DTToBytesLen6Inverted(System.DateTime)">
            <summary>
            根据DateTime 返回7个字节的数组(ssmmHHMMYYYY)
            </summary>
            <param name="dt">DateTime</param>
            <returns>Byte[]</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.GetBit(System.Byte,System.Int32)">
            <summary>
            index从0开始，获取取第index位
            </summary>
            <param name="b">byte</param>
            <param name="index">索引</param>
            <returns>byte</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.SetBit(System.Byte,System.Int32)">
            <summary>
            将第index位设为1
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.ClearBit(System.Byte,System.Int32)">
            <summary>
            将第index位设为0
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.ReverseBit(System.Byte,System.Int32)">
            <summary>
            将第index位取反
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.BinaryToByte(System.String)">
             <summary>
             将二进制字符串转换成byte
            eg：11111111==>255
                  00000010==>2
             </summary>
             <param name="binary">需要转换的二进制字符串【最多八个长度】</param>
             <returns>byte</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.BytesToStrExHL(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将十六进制byte数组高地位呼唤后，转成十进制字符串
            </summary>
            <param name="bytes">十六进制byte数组</param>
            <param name="startIndex">开始位置</param>
            <param name="endIndex">结束位置</param>
            <returns>十进制字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.BytesToIntExHL(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将十六进制byte数组高地位呼唤后，转成十进制数字
            若不能成功转换，则返回-1;
            </summary>
            <param name="bytes">十六进制byte数组</param>
            <param name="startIndex">开始位置</param>
            <param name="endIndex">结束位置</param>
            <returns>十进制数字</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.ByteArrayToHexExHL(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将byte数组截取，高低互换后，转换成十六进制字符串
            </summary>
            <param name="bytes">byte数组</param>
            <param name="startIndex">截取起始位置</param>
            <param name="endIndex">截取末尾位置</param>
            <returns>十六进制字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.BytesInvertedToDT(System.Byte[],System.Int32,System.Int32)">
             <summary>
            根据包里的用户数据(7或6字节)解析时间，返回DateTime
            <para>Byte[0]=秒，Byte[1]=分，Byte[2]=时，Byte[3]=日，Byte[4]=月，Byte[5]=年 为秒、分、时、日、月、年的BCD码</para>
            <para>如：42 05 15 20 05 09=2009年05月20日15时05分42秒</para>
            <para>注意42 05 15 20 05 09为16进制字符串</para>
             </summary>
             <param name="bytes">操作数组</param>
             <param name="startIndex">截取开始位置</param>
             <param name="endIndex">截取末尾位置</param>
             <returns>DateTime</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.BytesLen6ToDT(System.Byte[],System.Int32,System.Int32)">
            <summary>
            YYYYMMDD MMHH转换对应的时间类型
            </summary>
            <param name="bytes">操作数组</param>
            <param name="startIndex">截取起始位置</param>
            <param name="endIndex">截取末尾位置</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.BytesLen7ToDT(System.Byte[],System.Int32,System.Int32)">
            <summary>
            YYYYMMDD MMHH转换对应的时间类型
            </summary>
            <param name="bytes">操作数组</param>
            <param name="startIndex">截取起始位置</param>
            <param name="endIndex">截取末尾位置</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.BytesLen4ToDT(System.Byte[],System.Int32,System.Int32)">
             <summary>
             将4个长度的Byte数组转换成时间类型
            <para>eg:{0x02,0x12,0x10,0x12}=>2012-10-12</para>
             </summary>
             <param name="bytes">需要转换的byte数组</param>
             <param name="startIndex">截取的起始位</param>
             <param name="endIndex">截取的终止位</param>
             <returns>转换的时间</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.BytesLen2ToTime(System.Byte[],System.Int32,System.Int32)">
             <summary>
             将byte数组[截取后两位长度]转换成时间[HH:ss格式]
            <para> eg:{0x17,0x45}==>17:45</para>
             </summary>
             <param name="bytes">需要转换的byte数组</param>
             <param name="startIndex">截取的起始位</param>
             <param name="endIndex">截取的终止位</param>
             <returns>转换的时间</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.BytesToHexString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将byte数组转换成十六进制字符串
            </summary>
            <param name="bytes">操作byte数组</param>
            <param name="startIndex">截取的起始位</param>
            <param name="endIndex">截取的终止位</param>
            <returns>十六进制字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.ByteToHexWithBlank(System.Byte[],System.Int32,System.Int32)">
            <summary>
             将byte数组转换成十六进制带空格的字符串
            </summary>
            <param name="bytes">操作byte数组</param>
            <param name="startIndex">截取的起始位</param>
            <param name="endIndex">截取的终止位</param>
            <returns>十六进制字符串带空格</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.BytesToInt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将byte数组转换Int
            </summary>
            <param name="bytes">操作byte数组</param>
            <param name="startIndex">截取的起始位</param>
            <param name="endIndex">截取的终止位</param>
            <returns>int</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.ToByte(System.Int32)">
            <summary>
            将Int转换成Byte
            </summary>
            <param name="value">int</param>
            <returns>Byte</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.PercentHexToByte(System.Int32)">
            <summary>
            将十六进制百分比(0~255)转换成Byte
            </summary>
            <param name="number">int</param>
            <returns>byte</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.ToBytes(System.Int32)">
            <summary>
            将int转换成byte数组
            </summary>
            <param name="value">int</param>
            <returns>byte数组</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.ToBytesExHL(System.String)">
            <summary>
            将十六进制字符串转换成byte数组，然后高低位互换
            </summary>
            <param name="hexString">十六进制字符串</param>
            <returns>byte数组</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.ToBytesExHL(System.Int32)">
            <summary>
            将int转换byte数组，然后高低位互换
            </summary>
            <param name="value">int</param>
            <returns>byte数组</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.ToBytesLen2ExHL(System.Int32)">
            <summary>
            将int转换两个长度byte数组，然后高低位互换
            </summary>
            <param name="value">int</param>
            <returns>byte数组</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.ReverseBinaryToByte(System.String)">
            <summary>
            将二进制字符串逆转，低位在前高位在后，然后转换成十六进制byte
            </summary>
            <param name="binaryStr">二进制字符串</param>
            <returns>byte</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.OverPointValueUseReversed(System.Byte[],System.Byte[])">
            <summary>
            若source大于compare，则取source反。
            </summary>
            <param name="source">byte数组</param>
            <param name="compare">byte数组</param>
            <returns>int</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.OverPointValueUseReversed(System.Byte[],System.Byte[],System.Decimal)">
            <summary>
            若source大于compare，则取source反。
            </summary>
            <param name="source">byte数组</param>
            <param name="compare">byte数组</param>
            <param name="divisorValue">取反后需要除的除数</param>
            <returns>decimal</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.OverPointValueUseReversed(System.Byte[],System.Byte[],System.Decimal,System.Int32)">
            <summary>
            若source大于compare，则取source反。
            </summary>
            <param name="source">byte数组</param>
            <param name="compare">byte数组</param>
            <param name="divisorValue">取反后需要除的除数</param>
            <param name="precisionValue">除后，需要保留的精度</param>
            <returns>decimal</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.BytesToBinaryString(System.Byte[],System.Int32,System.Int32)">
             <summary>
             将byte数组转换成二进制字符串
            <para>eg:byte[1] { 0xff }==>11111111</para>
             </summary>
             <param name="bytes">操作数组</param>
             <param name="startIndex">截取开始位置</param>
             <param name="endIndex">截取末尾位置</param>
             <returns>二进制字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ByteHelper.BinaryToBytes(System.String)">
             <summary>
             将二进制字符串转换成Byte数组
            <para> eg:"1111 1111 1111 1111"==>byte[2]{0xff,0xff};</para>
             </summary>
             <param name="binaryString"></param>
             <returns></returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.AccessHelper">
            <summary>
            Access 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.AccessHelper.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="path">access路径</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.AccessHelper.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="path">access路径</param>
            <param name="password">access密码</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.AccessHelper.ExecuteNonQuery(System.String,System.Data.Common.DbParameter[])">
            <summary>
            ExecuteNonQuery
            </summary>
            <param name="sql">查询，修改，删除sql语句</param>
            <param name="parameters">OleDbParameter参数；eg: new OleDbParameter("@categoryName","Test2")</param>
            <returns>操作影响行数</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.AccessHelper.ExecuteReader(System.String,System.Data.Common.DbParameter[])">
            <summary>
            ExecuteReader
            </summary>
            <param name="sql">读取sql语句</param>
            <param name="parameters">OleDbParameter参数；eg: new OleDbParameter("@categoryName","Test2")</param>
            <returns>IDataReader</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.AccessHelper.ExecuteDataTable(System.String,System.Data.Common.DbParameter[])">
            <summary>
            ExecuteDataTable
            </summary>
            <param name="sql">读取sql语句</param>
            <param name="parameters">OleDbParameter参数；eg: new OleDbParameter("@categoryName","Test2")</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.AccessHelper.ExecuteScalar(System.String,System.Data.Common.DbParameter[])">
            <summary>
            ExecuteScalar
            </summary>
            <param name="sql">查询第一行第一列数据值</param>
            <param name="parameters">OleDbParameter参数；eg: new OleDbParameter("@categoryName","Test2")</param>
            <returns>Object</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.ConvertHelper">
            <summary>
            转换帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ConvertHelper.ToHexBinDecOct(System.String,YanZhiwei.DotNet2.Utilities.Enums.Conversion,YanZhiwei.DotNet2.Utilities.Enums.Conversion)">
            <summary>
            二，八，十，十六进制互相转换
            说明：
            若转换成二进制，会补足八个长度
            </summary>
            <param name="data">需要转换的字符串</param>
            <param name="from">原始进制</param>
            <param name="to">目标进制</param>
            <returns>转换结果；若转换失败返回"0"</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ConvertHelper.ToInt(System.Object,System.Int32)">
            <summary>
            转换成Int类型
            </summary>
            <param name="data">需要转换的object</param>
            <param name="errorData">转换失败后返回类型</param>
            <returns>转换返回</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ConvertHelper.ToInt16(System.Object,System.Int16)">
            <summary>
            转换成Int16类型
            </summary>
            <param name="data">需要转换的object</param>
            <param name="errorData">转换失败后返回类型</param>
            <returns>转换返回</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ConvertHelper.ToInt64(System.Object,System.Int64)">
            <summary>
            转换成Int64类型
            </summary>
            <param name="data">需要转换的object</param>
            <param name="errorValue">转换失败后返回类型</param>
            <returns>转换返回</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ConvertHelper.ToInt32(System.Object,System.Int32)">
            <summary>
            转换成Int32类型
            </summary>
            <param name="data">需要转换的object</param>
            <param name="errorValue">转换失败后返回类型</param>
            <returns>转换返回</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ConvertHelper.ToDouble(System.Object,System.Double)">
             <summary>
            转换成double类型
             </summary>
             <param name="data">需要转换的object</param>
             <param name="errorValue">转换失败后返回类型</param>
             <returns>转换返回</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ConvertHelper.ToDecimal(System.Object,System.Decimal)">
            <summary>
             转换成decimal类型
            </summary>
            <param name="data">需要转换的object</param>
            <param name="errorValue">转换失败后返回类型</param>
            <returns>转换返回</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ConvertHelper.ToString(System.Object,System.String)">
            <summary>
            转换成string类型
            </summary>
            <param name="data">需要转换的object</param>
            <param name="errorValue">转换失败后返回类型</param>
            <returns>转换返回</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ConvertHelper.ToStringBase``1(System.String)">
            <summary>
            字符串类型转换
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="data">需要转换的字符串</param>
            <returns>转换类型</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ConvertHelper.ToDate(System.Object,System.DateTime)">
            <summary>
            转换成日期
            </summary>
            <param name="data">数据</param>
            <param name="errorValue">转换失败返回数据</param>
            <returns></returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ConvertHelper.ToString``1(``0[],System.String)">
            <summary>
            泛型数组转换为字符串
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="array">泛型数组</param>
            <param name="delimiter">分隔符</param>
            <returns>转换好的字符串</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.DebugHelper">
            <summary>
            Debug 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DebugHelper.ConsoleOutput">
            <summary>
            输出到控制台
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DebugHelper.FileOutput(System.String)">
            <summary>
            输出到文件
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DebugHelper.FileOutput">
            <summary>
            输出到文件【文件名称：yyyyMMdd】
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.GuidHelper">
            <summary>
            GUID 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.GuidHelper.CreateSequential">
            <summary>
            创建顺序的GUID
            </summary>
            <returns>Guid</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.GuidHelper.ConvertToSqlServer(System.Guid)">
            <summary>
            将GUID转换成符合SQL Server的GUID
            </summary>
            <param name="guid">Guid</param>
            <returns>符合SQL Server的GUID</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.JsonHelper">
            <summary>
            JSON转换类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.JsonHelper.String2Json(System.String)">
            <summary>
            过滤特殊字符
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.JsonHelper.StringFormat(System.String,System.Type)">
            <summary>
            格式化字符型、日期型、布尔型
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.JsonHelper.ListToJson``1(System.Collections.Generic.IList{``0})">
            <summary>
            List转换成Json
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.JsonHelper.ListToJson``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            List转换成Json
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.JsonHelper.ToJson(System.Object)">
            <summary>
            对象转换为Json
            </summary>
            <param name="jsonObject">对象</param>
            <returns>Json字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.JsonHelper.ToJson(System.Collections.IEnumerable)">
            <summary>
            对象集合转换Json
            </summary>
            <param name="array">集合对象</param>
            <returns>Json字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.JsonHelper.ToArrayString(System.Collections.IEnumerable)">
            <summary>
            普通集合转换Json
            </summary>
            <param name="array">集合对象</param>
            <returns>Json字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.JsonHelper.ToJson(System.Data.DataSet)">
            <summary>
            DataSet转换为Json
            </summary>
            <param name="dataSet">DataSet对象</param>
            <returns>Json字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.JsonHelper.ToJson(System.Data.DataTable)">
            <summary>
            Datatable转换为Json
            </summary>
            <param name="table">Datatable对象</param>
            <returns>Json字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.JsonHelper.ToJson(System.Data.DataTable,System.String)">
            <summary>
            DataTable转换为Json
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.JsonHelper.ToJson(System.Data.Common.DbDataReader)">
            <summary>
            DataReader转换为Json
            </summary>
            <param name="dataReader">DataReader对象</param>
            <returns>Json字符串</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.CSVHelper">
            <summary>
            CSV 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.CSVHelper.ToCSV(System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            导出到csv文件
            eg:
            CSVHelper.ToCSV(_personInfoView, @"C:\Users\YanZh_000\Downloads\person.csv", "用户信息表", "名称,年龄");
            </summary>
            <param name="table">DataTable</param>
            <param name="filePath">导出路径</param>
            <param name="tableheader">标题</param>
            <param name="columname">列名称，以','英文逗号分隔</param>
            <returns>是否导出成功</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.CSVHelper.ImportToTable(System.Data.DataTable,System.String,System.Int32)">
            <summary>
            将CSV文件导入到DataTable
            eg:CSVHelper.ImportToTable(_personInfoView, @"C:\Users\YanZh_000\Downloads\person.csv", 2);
            </summary>
            <param name="table">DataTable</param>
            <param name="filePath">csv文件物理路径</param>
            <param name="startRowIndex">数据导入起始行号</param>
            <returns>DataTable</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.DateHelper">
            <summary>
            Date 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DateHelper.GetWeekNumber(System.DateTime)">
            <summary>
            获取日期是一年中第几个星期
            </summary>
            <param name="date">需要计算的时间</param>
            <returns>一年中第几个星期</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DateHelper.JsonToDateTime(System.String)">
            <summary>
            将 Json  的日期形("/Date(1242357713797+0800)/") 转换为DateTime
            </summary>
            <param name="jsonDate">Json格式日期</param>
            <returns>转换日期</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DateHelper.GetDateTime(System.Object)">
            <summary>
            转换为DateTime，支持json格式或常规日期格式
            </summary>
            <param name="src"></param>
            <returns>转换后的DateTime，如不能转换返回DateTime.MinValue</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DateHelper.GetDateTime(System.String)">
            <summary>
            将日期字符串转换为日期类型，常规日期
            </summary>
            <param name="dateTimeString">将日期字符串转</param>
            <returns>转换成功则返回日期类型，失败则返回NULL</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DateHelper.CountWeekdays(System.DateTime,System.DateTime)">
             <summary>
            计算两个时间之间工作天数
             </summary>
             <param name="startTime">开始时间</param>
             <param name="endTime">结束时间</param>
             <returns>工作天数 </returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DateHelper.CountWeekends(System.DateTime,System.DateTime)">
             <summary>
            计算两个时间直接周末天数
             </summary>
             <param name="startTime">开始天数</param>
             <param name="endTime">结束天数</param>
             <returns>周末天数</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DateHelper.IsDate(System.Object)">
             <summary>
            检查对象是否是时间类型
             </summary>
             <param name="obj">对象</param>
             <returns>是否是时间类型</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DateHelper.IsWeekDay(System.DateTime)">
            <summary>
            是否是工作日
            </summary>
            <param name="dt">DateTime</param>
            <returns>是否是工作日</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DateHelper.IsWeekEnd(System.DateTime)">
            <summary>
             是否是周末
            </summary>
            <param name="dt">DateTime</param>
            <returns>是否是周末</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DateHelper.ReturnDateFormat(System.Int32,System.String@,System.String@)">
            <summary>
            返回每月的第一天和最后一天
            </summary>
            <param name="month">需要计算的月份</param>
            <param name="firstDay">第一天</param>
            <param name="lastDay">最后一天</param>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.DBHelper">
            <summary>
            数据库操作的帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DBHelper.GroupByToSum(System.Data.DataTable,System.String,System.String,System.String)">
             <summary>
             DataTable的group by sum计算
            <para>eg:DBToolV2.GroupByToSum(_dt, "CTLampType", "钠灯- 100W", "CTLastMonthCount");</para>
             </summary>
             <param name="datatable">DataTable</param>
             <param name="groupColumn">group by的列</param>
             <param name="sumColumn">sum的列</param>
             <returns>计算的值</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DBHelper.Sum(System.Data.DataTable,System.String)">
            <summary>
            DataTable的列求和
            </summary>
            <param name="datatable">DataTable</param>
            <param name="sumColumn">sum的列</param>
            <returns>计算的值</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DBHelper.ToDataTable``1(System.Collections.Generic.IList{``0})">
            <summary>
            将LIST集合转换对应的DataTable
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="data">集合</param>
            <returns>将LIST集合转换对应的DataTable</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DBHelper.CreateTable(System.String)">
             <summary>
             创建Datatable，规范：列名|列类型,列名|列类型,列名|列类型
            <para>举例：CustomeName|string,Gender|bool,Address</para>
             </summary>
             <param name="columnsInfo"></param>
             <returns></returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DBHelper.CheckSmallint(System.String,System.Int16@)">
            <summary>
            是否是Smallint类型
            </summary>
            <param name="value">判断字符串</param>
            <param name="number">short</param>
            <returns>是否是Smallint类型</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DBHelper.CheckBigint(System.String,System.Int64@)">
            <summary>
            是否是Bigint类型
            </summary>
            <param name="value">判断字符串</param>
            <param name="number">Bigint</param>
            <returns>是否是Bigint类型</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DBHelper.CheckTinyint(System.String,System.Byte@)">
            <summary>
            是否是Tinyint
            </summary>
            <param name="value">判断字符串</param>
            <param name="number">Tinyint</param>
            <returns>是否是Tinyint类型</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DBHelper.BuilderMSSqlConnectString(System.String,System.String,System.String,System.String)">
            <summary>
            创建MS SQL链接字符串
            </summary>
            <param name="server">Server</param>
            <param name="database">DataBase</param>
            <param name="uid">uid</param>
            <param name="pwd">pwd</param>
            <returns>MS SQL链接字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DBHelper.FilterSqlInjection(System.String)">
            <summary>
            SQL注入筛选
            </summary>
            <param name="str">sql语句</param>
            <returns>SQL注入筛选</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DBHelper.PageDBWithRowNumberString(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            利用[ROW_NUMBER() over]分页，生成sql语句
            </summary>
            <param name="tableName">表名称『eg:Orders』</param>
            <param name="columns">需要显示列『*:所有列；或者：eg:OrderID,OrderDate,ShipName,ShipCountry』</param>
            <param name="orderColumn">依据排序的列『eg:OrderID』</param>
            <param name="orderType">升序降序『1：desc;其他:asc』</param>
            <param name="pSize">每页页数『需大于零』</param>
            <param name="pIndex">页数『从壹开始算』</param>
            <returns>生成分页sql脚本</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DBHelper.PageDBWithTopNotInString(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            利用[Top NotIn]分页，生成sql语句
            </summary>
            <param name="tableName">表名称『eg:Orders』</param>
            <param name="columns">需要显示列『*:所有列；或者：eg:OrderID,OrderDate,ShipName,ShipCountry』</param>
            <param name="orderColumn">依据排序的列『eg:OrderID』</param>
            <param name="orderType">升序降序『1：desc;其他:asc』</param>
            <param name="pSize">每页页数『需大于零』</param>
            <param name="pIndex">页数『从壹开始算』</param>
            <returns>生成分页sql脚本</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DBHelper.PageDBWithTopMaxString(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            利用[Top Max]分页，生成sql语句
            </summary>
            <param name="tableName">表名称『eg:Orders』</param>
            <param name="columns">需要显示列『*:所有列；或者：eg:OrderID,OrderDate,ShipName,ShipCountry』</param>
            <param name="orderColumn">依据排序的列『eg:OrderID』</param>
            <param name="orderType">升序降序『1：desc;其他:asc』</param>
            <param name="pSize">每页页数『需大于零』</param>
            <param name="pIndex">页数『从壹开始算』</param>
            <returns>生成分页sql脚本</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DBHelper.GetPageTotalCount(System.Int32,System.Int32)">
            <summary>
            获取分页总页数
            </summary>
            <param name="recordCnt">总记录条数</param>
            <param name="pageSize">每页页数</param>
            <returns>分页总页数</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DBHelper.ToString(System.Data.DataRow,System.String,System.String)">
            <summary>
            DataTable中列值为空检测，若等于空，则返回failValue
            </summary>
            <param name="row">DataRow</param>
            <param name="columnName">列名称</param>
            <param name="failValue">若列等于NULL，需要返回的值</param>
            <returns>若列不等于NULL则返回实际值</returns>
        </member>
        <!-- 对于成员“M:YanZhiwei.DotNet2.Utilities.Common.DBHelper.ToString(System.Data.DataRow,System.Int32,System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:YanZhiwei.DotNet2.Utilities.Common.DBHelper.ToInt(System.Data.DataRow,System.String,System.Int32)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:YanZhiwei.DotNet2.Utilities.Common.DBHelper.ToInt(System.Data.DataRow,System.Int32,System.Int32)”忽略有格式错误的 XML 注释 -->
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DBHelper.ToCSV(System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            将DataTable导出到CSV.
            </summary>
            <param name="table">DataTable</param>
            <param name="fullSavePath">保存路径</param>
            <param name="tableheader">标题信息</param>
            <param name="columname">列名称『eg:姓名,年龄』</param>
            <returns>导出成功true;导出失败false</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DBHelper.AppendCSVRecord(System.Data.DataTable,System.String,System.Int32)">
            <summary>
            将CSV文件数据导入到Datable中
            </summary>
            <param name="table"></param>
            <param name="filePath">DataTable</param>
            <param name="rowIndex">保存路径</param>
            <returns>Datable</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DBHelper.FilterUnSafeSQL(System.String)">
            <summary>
            过滤SQL不安全的字符串
            </summary>
            <param name="dataString">字符串</param>
            <returns>过滤后的字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DBHelper.FilterSqlInject(System.String)">
            <summary>
            过滤SQL语句字符串中的注入脚本
            </summary>
            <param name="dataString">传入的字符串</param>
            <returns>过滤后的字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DBHelper.FilterSpecial(System.String)">
            <summary>
            过滤特殊字符
            </summary>
            <param name="dataString">字符串</param>
            <returns>过滤后的字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DBHelper.FilterHtmlTag(System.String)">
            <summary>
            过滤HTML标记
            </summary>
            <param name="htmlString">包括HTML，脚本，数据库关键字，特殊字符的源码 </param>
            <returns>已经去除标记后的文字</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DBHelper.FilterString(System.String)">
            <summary>
            过滤字符串【HTML标记，敏感SQL操作关键，特殊字符】
            </summary>
            <param name="dataString">字符串</param>
            <returns>处理后的字符串</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.DESEncryptHelper">
            <summary>
            DES(Data Encryption Standard)
            DES使用的密钥key为8字节，初始向量IV也是8字节。
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DESEncryptHelper.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="key"></param>
            <param name="iv"></param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DESEncryptHelper.Encrypt(System.String)">
            <summary>
            加密字符串
            </summary>
            <param name="value"> 需要加密字符串</param>
            <returns> 加密字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DESEncryptHelper.Decrypt(System.String)">
            <summary>
            解密字符串
            </summary>
            <param name="value">需要解密字符串</param>
            <returns> 解密字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.DESEncryptHelper.ValidateString(System.String,System.String)">
            <summary>
            判断加密字符串和解密字符串是否相等
            </summary>
            <param name="EnString">加密字符串</param>
            <param name="DeString">解密字符串</param>
            <returns>bool</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.EnumerableHelper">
            <summary>
            Enumerable 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.EnumerableHelper.AsLocked``1(System.Collections.Generic.IEnumerable{``0},System.Object)">
             <summary>
             线程安全【上锁】
            <para> eg: foreach(var item in someList.AsLocked(someLock))</para>
            <para> 参考:http://www.codeproject.com/Articles/56575/Thread-safe-enumeration-in-C </para>
             </summary>
             <typeparam name="T">泛型</typeparam>
             <param name="ie">IEnumerable</param>
             <param name="lock">lock对象</param>
             <returns>IEnumerable</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.EnumHelper">
            <summary>
            基于.NET 2.0的枚举帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.EnumHelper.GetDescription(System.Enum)">
            <summary>
            从枚举中获取Description
            </summary>
            <param name="enumName">需要获取枚举描述的枚举</param>
            <returns>描述内容</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.EnumHelper.GetDescriptAttr(System.Reflection.FieldInfo)">
            <summary>
            获取字段Description
            </summary>
            <param name="fieldInfo">FieldInfo</param>
            <returns>DescriptionAttribute[] </returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.EnumHelper.GetEnumName``1(System.String)">
            <summary>
            根据Description获取枚举
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="description">枚举描述</param>
            <returns>枚举</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.EnumHelper.ToArrayList(System.Type)">
             <summary>
             将枚举转换为ArrayList
            <para>说明：</para>
            <para>若不是枚举类型，则返回NULL</para>
             </summary>
             <param name="type">枚举类型</param>
             <returns>ArrayList</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.EnumHelper.ToList(System.Type)">
            <summary>
            将枚举类型转换成列表，每条数据有name和value属性
            </summary>
            <param name="type">要转换的枚举类型</param>
            <returns>List集合</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.ExceptionHelper">
            <summary>
            基于.NET 2.0的Exception帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ExceptionHelper.Builder_Auxiliary_ParamName_Message(System.Exception,System.String,System.Func{System.String,System.String})">
             <summary>
             格式化异常信息提示
            <para>格式:辅助信息_ParamName_Message</para>
             </summary>
             <param name="ex">Exception</param>
             <param name="auxiliaryText">辅助提示信息</param>
             <param name="messageHanlder">委托</param>
             <returns>格式化异常信息</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.FileHelper">
            <summary>
            基于.NET 2.0的文件以及文件夹操作帮助类
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Common.FileHelper.PATH_SPLIT_CHAR">
            <summary>
            路径分割符
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FileHelper.GetFileNameOnly(System.String)">
            <summary>
            从路径中获取文件名称（不包括后缀）
            </summary>
            <param name="path">路径</param>
            <returns>文件名称（不包括后缀）</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FileHelper.GetFileName(System.String)">
            <summary>
            从路径中获取文件名称（包括后缀）
            </summary>
            <param name="path">路径</param>
            <returns>文件名称（包括后缀）</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FileHelper.GetFileEx(System.String)">
            <summary>
            从路径中获取文件后缀
            </summary>
            <param name="path">路径</param>
            <returns>文件后缀</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FileHelper.GetExceptName(System.String)">
            <summary>
            获取除文件外的路径
            </summary>
            <param name="path">路径</param>
            <returns>除文件外的路径</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FileHelper.GetExceptEx(System.String)">
            <summary>
            获取除后缀外的路径
            </summary>
            <param name="path">路径</param>
            <returns>除后缀外的路径</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FileHelper.FileToBytes(System.String)">
            <summary>
            将文件转换成二进制数组
            </summary>
            <param name="filePath">文件路径</param>
            <returns>二进制数组</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FileHelper.BytesToFile(System.Byte[],System.String)">
            <summary>
            将byte[]导出到文件
            </summary>
            <param name="bytes"></param>
            <param name="filePath"></param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FileHelper.CreateTempPath(System.String)">
            <summary>
            创建临时文件路径
            </summary>
            <param name="extension">文件后缀;eg:xml</param>
            <returns>临时文件路径</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FileHelper.OpenFolderAndFile(System.String)">
            <summary>
            打开文件或者文件夹
            </summary>
            <param name="path">文件夹或者文件的路径</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FileHelper.GetSize(System.String)">
            <summary>
            获取文件大小—字节
            </summary>
            <param name="filePath">文件路径</param>
            <returns>文件大小</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FileHelper.GetKBSize(System.String)">
            <summary>
            获取文件大小—kb
            </summary>
            <param name="filePath">文件路径</param>
            <returns>文件大小_kb</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FileHelper.GetMBSize(System.String)">
            <summary>
            获取文件大小—mb
            </summary>
            <param name="filePath">文件路径</param>
            <returns>文件大小_mb</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FileHelper.CopyToBak(System.String)">
            <summary>
            文件复制备份
            </summary>
            <param name="filePath">文件路径</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FileHelper.CopyFiles(System.String,System.String,System.Boolean)">
            <summary>
            复制指定目录的所有文件,不包含子目录及子目录中的文件
            </summary>
            <param name="sourceDir">原始目录</param>
            <param name="targetDir">目标目录</param>
            <param name="overWrite">如果为true,表示覆盖同名文件,否则不覆盖</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FileHelper.CopyFiles(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            复制指定目录的所有文件
            </summary>
            <param name="sourceDir">原始目录</param>
            <param name="targetDir">目标目录</param>
            <param name="overWrite">如果为true,覆盖同名文件,否则不覆盖</param>
            <param name="copySubDir">如果为true,包含目录,否则不包含</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FileHelper.CopyFiles(System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            复制指定目录的所有文件，并把复制的文件备份到备份目录中
            </summary>
            <param name="sourceDir">原始目录</param>
            <param name="targetDir">目标目录</param>
            <param name="overWrite">如果为true,覆盖同名文件,否则不覆盖</param>
            <param name="copySubDir">如果为true,包含目录,否则不包含</param>
            <param name="backDir">备份目录</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FileHelper.MoveFiles(System.String,System.String,System.Boolean)">
            <summary>
            剪切指定目录的所有文件,不包含子目录
            </summary>
            <param name="sourceDir">原始目录</param>
            <param name="targetDir">目标目录</param>
            <param name="overWrite">如果为true,覆盖同名文件,否则不覆盖</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FileHelper.MoveFiles(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            剪切指定目录的所有文件
            </summary>
            <param name="sourceDir">原始目录</param>
            <param name="targetDir">目标目录</param>
            <param name="overWrite">如果为true,覆盖同名文件,否则不覆盖</param>
            <param name="moveSubDir">如果为true,包含目录,否则不包含</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FileHelper.DeleteFiles(System.String)">
            <summary>
            删除指定目录的所有文件，不包含子目录
            </summary>
            <param name="targetDir">操作目录</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FileHelper.DeleteFiles(System.String,System.Boolean)">
            <summary>
            删除指定目录的所有文件和子目录
            </summary>
            <param name="targetDir">操作目录</param>
            <param name="delSubDir">如果为true,包含对子目录的操作</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FileHelper.CreateDirectory(System.String)">
            <summary>
            创建指定目录
            </summary>
            <param name="targetDir"></param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FileHelper.CreateDirectory(System.String,System.String)">
            <summary>
            建立子目录
            </summary>
            <param name="parentDir">目录路径</param>
            <param name="subDirName">子目录名称</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FileHelper.DeleteDirectory(System.String)">
            <summary>
            删除指定目录
            </summary>
            <param name="targetDir">目录路径</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FileHelper.DeleteSubDirectory(System.String)">
            <summary>
            删除指定目录的所有子目录,不包括对当前目录文件的删除
            </summary>
            <param name="targetDir">目录路径</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FileHelper.CreateXml(System.String)">
            <summary>
            将指定目录下的子目录和文件生成xml文档
            </summary>
            <param name="targetDir">根目录</param>
            <returns>返回XmlDocument对象</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FileHelper.CreateBranch(System.String,System.Xml.XmlElement,System.Xml.XmlDocument)">
            <summary>
            生成Xml分支
            </summary>
            <param name="targetDir">子目录</param>
            <param name="xmlNode">父目录XmlDocument</param>
            <param name="myDocument">XmlDocument对象</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FileHelper.StartupSet(System.String,System.String,System.Boolean)">
            <summary>
            设置程序开机启动_注册表形式
            参考
            http://syxc.iteye.com/blog/673972
            http://zouqinghua11111.blog.163.com/blog/static/67997654201242334620628/
            http://stackoverflow.com/questions/5089601/run-the-application-at-windows-startup
            其他
            管理员权限问题：
            在打开的工程中，看下Properties 下面是否有app.manifest 这个文件，如果没有，右击工程在菜单中选择“属性”，
            选中"Security"，在界面中勾选"Enable ClickOnce Security Settings"后，在Properties下就有自动生成app.manifest文件。
            打开app.manifest文件，将
            <requestedExecutionLevel level="asInvoker" uiAccess="false" />
            改为
            <requestedExecutionLevel level="requireAdministrator" uiAccess="false" />
            然后在"Security"中再勾去"Enable ClickOnce Security Settings"后，重新编译即可。
            </summary>
            <param name="path">需要开机启动的exe路径</param>
            <param name="keyName">注册表中键值名称</param>
            <param name="set">true设置开机启动，false取消开机启动</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FileHelper.LoopFolder(System.String,System.Action{System.IO.FileInfo})">
            <summary>
            递归获取文件夹目录下文件
            </summary>
            <param name="pathName">需要递归遍历的文件夹</param>
            <param name="fileRule">遍历规则『委托』</param>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.FontHelper">
            <summary>
            基于.NET 2.0的FONT帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FontHelper.SendMessage(System.Int32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            SendMessage
            </summary>
            <returns></returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FontHelper.AddFontResource(System.String)">
            <summary>
            AddFontResource
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FontHelper.InstallFont(System.String)">
            <summary>
            字体安装
            </summary>
            <param name="fontSourcePath">字体所在路径</param>
            <returns>是否安装成功</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.FormulaHelper">
            <summary>
            公式计算
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.FormulaHelper.CalculateExpress(System.String)">
            <summary>
            公式计算
            </summary>
            <param name="formulaString">公式计算表达式</param>
            <returns>计算结果</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.HexHelper">
            <summary>
            十六进制帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.HexHelper.PercentToHex(System.Decimal,System.Int32)">
            <summary>
            将百分比转换成十六进制字符串
            </summary>
            <param name="number">80即表示80%</param>
            <param name="capacity">不足设定的位数的时候，向左边补充'0'</param>
            <returns>十六进制字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.HexHelper.HexToPercent(System.String)">
            <summary>
            将十六进制转换成百分比
            </summary>
            <param name="hex">需要转换的十六进制</param>
            <returns>百分比</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.HexHelper.ToDecimal(System.String)">
            <summary>
            将十六进制字符串转换成十进制
            <para> eg:FF=>255</para>
            </summary>
            <param name="hexString">十六进制字符串</param>
            <returns>Decimal</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.HexHelper.ToInt(System.String)">
            <summary>
            将十六进制字符串转换INT
            </summary>
            <param name="hexString">十六进制字符串</param>
            <returns>INT</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.HexHelper.ToHexString(System.Int32,System.Int32)">
            <summary>
            将INT转换成十六进制字符串
            </summary>
            <param name="number">int</param>
            <param name="capacity">长度，不足则向左不足0</param>
            <returns>十六进制字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.HexHelper.ToHexString(System.Int32)">
             <summary>
            将INT转换成十六进制字符串
             </summary>
             <param name="number">int</param>
             <returns>十六进制字符串</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.IComparerHelper">
            <summary>
            IComparerToolV2帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.IComparerHelper.ComparePlus``1(``0,``0,System.Func{``0,``0,System.Int32})">
             <summary>
            IComparer接口实现内，Comparer方法判断帮助
             </summary>
             <typeparam name="T">泛型</typeparam>
             <param name="x">泛型x值</param>
             <param name="y">泛型y值</param>
             <param name="comparedelete">委托；eg:(t, u) => { return t.PoleID.CompareTo(u.PoleID); }</param>
             <returns>对象比较</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.IListHelper">
            <summary>
            List帮助类
            </summary>
        </member>
        <!-- 对于成员“M:YanZhiwei.DotNet2.Utilities.Common.IListHelper.AddUnique``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})”忽略有格式错误的 XML 注释 -->
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.IListHelper.ConvertToList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            转换为List
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="self">需要转换的集合</param>
            <returns>List</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.IListHelper.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            集合添加
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="self">本身集合</param>
            <param name="list">需要添加集合</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.IListHelper.AddUnique``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            去重复集合添加
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="self">本身集合</param>
            <param name="items">需要添加集合</param>
            <param name="comparaer">IComparer</param>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.ImageHelper">
            <summary>
            基于.NET 2.0的Image帮助类
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Common.ImageHelper.AllowExt">
            <summary>
            图片允许的格式
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ImageHelper.ToBytes(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            将图片转换成byte[]
            </summary>
            <param name="Image">Image</param>
            <param name="imageFormat">ImageFormat</param>
            <returns>byte[]</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ImageHelper.ToImage(System.Byte[])">
            <summary>
            byte[]转换成Image
            </summary>
            <param name="byteArray">二进制图片流</param>
            <returns>Image</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ImageHelper.ToBytes(System.Drawing.Bitmap,System.Drawing.Imaging.ImageFormat)">
            <summary>
            将Bitmap转换成ByteArray
            </summary>
            <param name="bitmap">Bitmap</param>
            <param name="format">ImageFormat</param>
            <returns>byte[]</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ImageHelper.ToBytes(System.Drawing.Bitmap)">
            <summary>
            将Bitmap转换成 byte[]
            </summary>
            <param name="bitmap">Bitmap</param>
            <returns></returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ImageHelper.MergerImage(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Bitmap[])">
            <summary>
            合并图片
            </summary>
            <param name="mergerImageWidth">合并图片的宽度</param>
            <param name="mergerImageHeight">合并图片的高度</param>
            <param name="imageX">所绘制图像的左上角的X坐标</param>
            <param name="imageY">所绘制图像的左上角的Y坐标</param>
            <param name="backgroundColor">合并图片的背景色</param>
            <param name="maps">所需要绘制的图片集合</param>
            <returns>绘制的图片</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ImageHelper.AdjustBrightness(System.Drawing.Bitmap,System.Int32)">
            <summary>
            调节图片亮度值
            参考：
            http://www.nullskull.com/faq/528/c-net--change-brightness-of-image--jpg-gif-or-bmp.aspx
            http://blog.csdn.net/jiangxinyu/article/details/6222302
            http://www.smokycogs.com/blog/image-processing-in-c-sharp-adjusting-the-brightness/
            </summary>
            <param name="Image">需要处理的图片</param>
            <param name="Value">亮度值【0~100，其中0表示最暗，100表示最亮】</param>
            <returns>调节好后的图片</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ImageHelper.ToBitmap(System.String)">
            <summary>
            将.png,.bmp,.jpg类型图片转换成bitmap类型
            </summary>
            <param name="imagePath">图片路径</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ImageHelper.CompareByMemCmp(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Bitmap比较
            </summary>
            <param name="b1">Bitmap1</param>
            <param name="b2">Bitmap2</param>
            <returns>比较结果</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ImageHelper.CompareByBase64String(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            通过比较bitmap两者ToBase64String来判断是否相等
            </summary>
            <param name="b1">Bitmap1</param>
            <param name="b2">Bitmap2</param>
            <returns>比较结果</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ImageHelper.CompareByPixel(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            通过比较bitmap两者像素颜色来判断两者是否相等
            </summary>
            <param name="b1">Bitmap1</param>
            <param name="b2">Bitmap2</param>
            <returns>比较结果</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ImageHelper.memcmp(System.Byte[],System.Byte[],System.IntPtr)">
            <summary>
            memcmp API
            </summary>
            <param name="b1">字节数组1</param>
            <param name="b2">字节数组2</param>
            <returns>如果两个数组相同，返回0；如果数组1小于数组2，返回小于0的值；如果数组1大于数组2，返回大于0的值。</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ImageHelper.CompareByArray(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            通过比较bitmap两者byte[]来判断是否相等
            </summary>
            <param name="b1">Bitmap1</param>
            <param name="b2">Bitmap2</param>
            <returns>比较结果</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ImageHelper.AddWaterPic(System.String,System.String)">
            <summary>
            在图片上生成图片水印
            </summary>
            <param name="imagePath">图片路径</param>
            <param name="waterImagePath">水印图片路径</param>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.INIHelper">
             <summary>
             基于.NET 2.0的INI工具类
            <para>参考:</para>
            <para>http://www.cnblogs.com/leelike/archive/2011/01/27/1946061.html</para>
            <para>http://www.cnblogs.com/zzyyll2/archive/2007/11/06/950584.html</para>
             </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Common.INIHelper.ReadDefaultValue">
            <summary>
            当读取不到值得时候缺省值
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.INIHelper.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="filePath">INI路径eg：@"C:\test.ini"</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.INIHelper.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
            声明INI文件的写操作函数
            </summary>
            <param name="section">段落名称</param>
            <param name="key">关键字</param>
            <param name="val">关键字对应的值</param>
            <param name="filePath">路径</param>
            <returns></returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.INIHelper.GetPrivateProfileString(System.String,System.String,System.String,System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            声明INI文件的读操作函数
            </summary>
            <param name="section">段落名称</param>
            <param name="key">关键字</param>
            <param name="def">无法读取时候时候的缺省数值</param>
            <param name="retVal">读取数值</param>
            <param name="size">数值的大小></param>
            <param name="filePath">路径</param>
            <returns></returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.INIHelper.WriteValue(System.String,System.String,System.String)">
            <summary>
            写入INI
            eg:_iniHelper.WriteValue("测试", "Name", "YanZhiwei");
            </summary>
            <param name="Section">段落名称</param>
            <param name="Key">关键字</param>
            <param name="Value">关键字对应的值</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.INIHelper.ReadValue(System.String,System.String)">
            <summary>
            读取INI
            </summary>
            <param name="Section">段落名称</param>
            <param name="Key">关键字</param>
            <returns>读取值</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.INIHelper.ReadValue(System.String,System.String,System.String)">
            <summary>
            读取INI
            </summary>
            <param name="Section">段落名称</param>
            <param name="Key">关键字</param>
            <param name="defaultValue">当根据KEY读取不到值得时候缺省值</param>
            <returns>读取的值</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.INIHelper.Exist">
            <summary>
            检查INI文件路径是否存在
            </summary>
            <returns>是否存在</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.INIHelper.WriteValue``1(System.String,``0)">
            <summary>
            将对象保存在ini
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="Section">段落名称</param>
            <param name="t">类型</param>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.StringBuilderHelper">
            <summary>
            StringBuilder 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringBuilderHelper.Clear(System.Text.StringBuilder)">
            <summary>
            清空StringBuilder
            </summary>
            <param name="builder">StringBuilder</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringBuilderHelper.NullOrCreate(System.Text.StringBuilder)">
            <summary>
            检查StringBuilder是否为null，当为null的时候，实例化返回。
            </summary>
            <param name="builder">StringBuilder</param>
            <returns>StringBuilder</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeLazy`1">
            <summary>
            Lazy 基于.NET 2.0的实现
            <para>参考：http://stackoverflow.com/questions/3207580/implementation-of-lazyt-for-net-3-5 </para>
            </summary>
            <typeparam name="T">泛型</typeparam>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeLazy`1.#ctor(System.Func{`0})">
            <summary>
            构造函数
            </summary>
            <param name="createValue">委托</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeLazy`1.ToString">
            <summary>
            ToString
            </summary>
            <returns>String</returns>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeLazy`1.Value">
            <summary>
            获取初始化值
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeLazy`1.IsValueCreated">
            <summary>
            是否初始化
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.MapHelper">
            <summary>
            地图操作 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.MapHelper.LonToPixel(System.Double,System.Int32)">
            <summary>
            将经度转换成地图x轴坐标
            </summary>
            <param name="lng">经度</param>
            <param name="zoom">缩放级别</param>
            <returns>坐标</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.MapHelper.LatToPixel(System.Double,System.Int32)">
            <summary>
            将纬度转换成地图y轴坐标
            </summary>
            <param name="lat">纬度</param>
            <param name="zoom">缩放级别</param>
            <returns>坐标</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.MapHelper.PixelToLon(System.Double,System.Int32)">
            <summary>
            将X轴坐标转换成经度
            </summary>
            <param name="pixelX">X轴坐标</param>
            <param name="zoom">缩放级别</param>
            <returns>经度</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.MapHelper.PixelToLat(System.Double,System.Int32)">
            <summary>
            将Y轴坐标转换成纬度
            </summary>
            <param name="pixelY">Y轴坐标</param>
            <param name="zoom">缩放级别</param>
            <returns>纬度</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.MapHelper.OutOfChina(YanZhiwei.DotNet2.Utilities.Models.LatLngPoint)">
            <summary>
            坐标是否在国外
            </summary>
            <param name="latlon">经纬度</param>
            <returns>坐标是否在国外</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.MapHelper.GetQueryLocation(YanZhiwei.DotNet2.Utilities.Models.LatLngPoint)">
            <summary>
            将经纬度转换地图上X,Y坐标
            </summary>
            <param name="point">经纬度</param>
            <returns>X,Y坐标</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.MapHelper.GetDistance(YanZhiwei.DotNet2.Utilities.Models.LatLngPoint,YanZhiwei.DotNet2.Utilities.Models.LatLngPoint)">
            <summary>
            经纬度测距
            </summary>
            <param name="fromPoint">起始经纬度</param>
            <param name="toPoint">结束经纬度</param>
            <returns>距离</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.MapOffsetDataHelper">
            <summary>
            地图纠偏数据帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.MapOffsetDataHelper.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="path">纠偏数据文件路径</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.MapOffsetDataHelper.ToCoord(System.Byte[])">
            <summary>
            将字节转化为具体的数据对象
            </summary>
            <param name="bytes">bytes</param>
            <returns>MapCoord</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.MapOffsetDataHelper.GetMapCoordList">
            <summary>
            获取纠偏数据集合
            </summary>
            <returns>纠偏数据集合</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.MapOffsetDataHelper.GetMapCoordArrayList">
            <summary>
            获取纠偏数据集合
            </summary>
            <returns>纠偏数据集合</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.MapOffsetHelper">
            <summary>
            地图纠偏 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.MapOffsetHelper.#ctor(System.Collections.ArrayList)">
            <summary>
            构造函数
            </summary>
            <param name="offsetData">纠偏数据</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.MapOffsetHelper.WGS84ToGCJ02(YanZhiwei.DotNet2.Utilities.Models.LatLngPoint)">
            <summary>
            地球坐标(WGS-84)转火星坐标 (GCJ-02)
            </summary>
            <param name="wgsPoint">地球坐标(WGS-84)</param>
            <returns>火星坐标 (GCJ-02)</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.MapOffsetHelper.GCJ02ToWGS84(YanZhiwei.DotNet2.Utilities.Models.LatLngPoint)">
            <summary>
            火星坐标转 (GCJ-02)地球坐标(WGS-84)
            </summary>
            <param name="gcjPoint">火星坐标转 (GCJ-02)</param>
            <returns>地球坐标(WGS-84)</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.WGSMercatorLatLonHelper">
            <summary>
            墨卡托坐标与GS-84转换 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.WGSMercatorLatLonHelper.WGS84ToMercator(YanZhiwei.DotNet2.Utilities.Models.LatLngPoint)">
            <summary>
            将地球坐标(WGS-84)转换成墨卡托坐标
            </summary>
            <param name="wgsPoint">地球坐标(WGS-84)</param>
            <returns>墨卡托坐标</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.WGSMercatorLatLonHelper.mercator2lonlat(YanZhiwei.DotNet2.Utilities.Models.LatLngPoint)">
            <summary>
            将墨卡托坐标转换成地球坐标(WGS-84)
            </summary>
            <param name="mercator">墨卡托坐标</param>
            <returns>球坐标(WGS-84)</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.WGSGCJLatLonHelper">
            <summary>
            地球坐标系 (WGS-84) 到火星坐标系 (GCJ-02) 的转换 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.WGSGCJLatLonHelper.GCJ02ToWGS84(YanZhiwei.DotNet2.Utilities.Models.LatLngPoint)">
            <summary>
            火星坐标转 (GCJ-02)地球坐标(WGS-84)
            </summary>
            <param name="gcjPoint">火星坐标转 (GCJ-02)</param>
            <returns>地球坐标(WGS-84)</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.WGSGCJLatLonHelper.WGS84ToGCJ02(YanZhiwei.DotNet2.Utilities.Models.LatLngPoint)">
            <summary>
            地球坐标(WGS-84)转火星坐标 (GCJ-02)
            </summary>
            <param name="wgsPoint">地球坐标(WGS-84)</param>
            <returns>火星坐标 (GCJ-02)</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Models.ClipboardCtrl">
            <summary>
            控制复制克隆的实体类
            参考:http://www.codeproject.com/Articles/12976/How-to-Clone-Serialize-Copy-Paste-a-Windows-Forms
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Models.ClipboardCtrl.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Models.ClipboardCtrl.#ctor(System.Windows.Forms.Control)">
            <summary>
            带参数的构造函数
            </summary>
            <param name="ctrl">控件</param>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Models.ClipboardCtrl.Format">
            <summary>
            DataFormats.Format
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Models.ClipboardCtrl.CtrlName">
            <summary>
            空间类型名称
            eg:Combox
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Models.ClipboardCtrl.CtrlNamespace">
             <summary>
            控件的名称空间
            eg:System.Windows.Forms
             </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Models.ClipboardCtrl.CtrlPropertyList">
            <summary>
            控件的属性集合
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Models.ControlRect">
            <summary>
            记录窗体和其控件的初始位置和大小。
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Models.ControlRect.Left">
            <summary>
            左边
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Models.ControlRect.Top">
            <summary>
            上边
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Models.ControlRect.Width">
            <summary>
            宽度
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Models.ControlRect.Height">
            <summary>
            高度
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Models.GeoPoint">
            <summary>
            地图X,Y坐标轴
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Models.GeoPoint.#ctor(System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Models.GeoPoint.X">
            <summary>
            X轴
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Models.GeoPoint.Y">
            <summary>
            Y轴
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Models.MapCoord">
            <summary>
            地图坐标
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Models.MapCoord.Lon">
            <summary>
            经度
            12151表示121.51
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Models.MapCoord.Lat">
            <summary>
            纬度
            3130表示31.30
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Models.MapCoord.X_off">
             <summary>
            地图x轴偏移像素值
             </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Models.MapCoord.Y_off">
             <summary>
            地图y轴偏移像素值
             </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Models.LatLngPoint">
            <summary>
            经纬度
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Models.LatLngPoint.#ctor(System.Double,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="lat">纬度</param>
            <param name="lon">经度</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Models.LatLngPoint.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Models.LatLngPoint.LonX">
            <summary>
            经度
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Models.LatLngPoint.LatY">
            <summary>
            纬度
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.ListHelper">
            <summary>
            基于.NET 2.0的List帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ListHelper.ToThreadSafeList``1(System.Collections.Generic.IEnumerable{``0})">
             <summary>
            转换为线程安全的ThreadSafeList集合
             </summary>
             <typeparam name="T">泛型</typeparam>
             <param name="self">需要操作的集合</param>
             <returns>ThreadSafeList集合</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.LogHelper">
            <summary>
            基于.NET 2.0日志工具类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.LogHelper.FinishedLogTask">
            <summary>
            结束日志线程
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.LogHelper.Log(System.String)">
            <summary>
            记录日志
            </summary>
            <param name="msg">日志内容</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.LogHelper.Log(System.String,YanZhiwei.DotNet2.Utilities.Enums.LogLevel)">
            <summary>
            记录日志
            </summary>
            <param name="msg">日志内容</param>
            <param name="type">日志类型</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.LogHelper.Log(YanZhiwei.DotNet2.Utilities.Enums.LogLevel,System.String)">
            <summary>
            记录日志
            </summary>
            <param name="type">日志类型</param>
            <param name="msg">日志内容</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.LogHelper.Log(System.Exception)">
            <summary>
            记录日志
            </summary>
            <param name="ex">异常</param>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.NameValueHelper">
            <summary>
            NameValueCollection帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.NameValueHelper.JudgedEqual(System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>
            针对NameValueCollection的键值判断
            </summary>
            <param name="collection">NameValueCollection</param>
            <param name="key">键</param>
            <param name="toEqualValue">期待的值</param>
            <returns>根据键获取的值与期待的值一致</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.NameValueHelper.JudgedEqual``1(System.Collections.Specialized.NameValueCollection,System.String,System.String,System.Func{System.Boolean,``0})">
             <summary>
             针对NameValueCollection的键值判断
            <para>eg: _modulesettings.JudgedEqual("EmergencyControl", "1", result => { return result == true ? BarItemVisibility.Always : BarItemVisibility.Never; });</para>
             </summary>
             <typeparam name="T">返回类型</typeparam>
             <param name="collection">NameValueCollection</param>
             <param name="key">键</param>
             <param name="toEqualValue">期待的值</param>
             <param name="judgeRule">委托</param>
             <returns>自定义返回类型</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.NameValueHelper.JudgedEqual``1(System.String,System.String,System.Func{System.Boolean,``0})">
            <summary>
            针对String类型的等于判断
            <para>eg: _modulesettings["WeekSchedule"].JudgedEqual("1", result => ItemVisibilityRule(result));</para>
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="value">需要判断的值</param>
            <param name="toEqualValue">期待的值</param>
            <param name="judgeRule">委托</param>
            <returns>自定义返回类型</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.ResourceHelper">
            <summary>
            资源文件操作帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ResourceHelper.ExtractEmbeddedResourceToFile(System.String,System.String)">
            <summary>
            将嵌入的资源写入到本地
            </summary>
            <param name="resourceName">嵌入的资源名称【名称空间.资源名称】</param>
            <param name="filename">写入本地的路径</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.RMBHelper">
            <summary>
            RMB 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.RMBHelper.ToRMBDescription(System.Decimal)">
            <summary>
            将数字转换成人民币大小金额
            </summary>
            <param name="rmbValue">数字</param>
            <returns>人民币大小金额</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.RMBHelper.ToRMBDescription(System.String)">
            <summary>
            将字符串数字转换成人民币大小金额
            </summary>
            <param name="rmbString">字符串数字</param>
            <returns>人民币大小金额，若字符串不能成数字则原字符串返回</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.ThumbHelper">
            <summary>
            缩略图帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThumbHelper.MakeThumbnail(System.String,System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalImagePath">源图路径（物理路径）</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <param name="mode">生成缩略图的方式: HW=指定高宽,W=指定宽，高按比例, H=指定高，宽按比例, Cut=指定高宽裁减(不变形), DB=等比缩放（不变形，如果高大按高，宽大按宽缩放） </param>
            <param name="type">缩略图的类型：JPG, PNG, GIF, BMP</param>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.TimeHelper">
            <summary>
            时间操作帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.TimeHelper.SecondToMinute(System.Int32)">
            <summary>
            把秒转换成分钟
            </summary>
            <returns>分钟</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.TimeHelper.GetMonthLastDate(System.Int32,System.Int32)">
            <summary>
            返回某年某月最后一天
            </summary>
            <param name="year">年份</param>
            <param name="month">月份</param>
            <returns>日</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.TimeHelper.DateDiff(System.DateTime,System.DateTime)">
            <summary>
            计算时间差
            </summary>
            <param name="startTime">开始时间</param>
            <param name="endTime">结束时间</param>
            <returns>时间差文字描述</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.TimeHelper.FormatDate(System.DateTime,System.String)">
            <summary>
            格式化日期时间
            </summary>
            <param name="dateTime">日期时间</param>
            <param name="dateMode">显示模式</param>
            <returns>0-9种模式的日期</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.TimeHelper.GetRandomTime(System.DateTime,System.DateTime)">
            <summary>
            得到随机日期
            </summary>
            <param name="timeStart">起始日期</param>
            <param name="timeEnd">结束日期</param>
            <returns>间隔日期之间的 随机日期</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.ValidateHelper">
            <summary>
            验证帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ValidateHelper.IsIdCard(System.String)">
            <summary>
            验证身份证是否合法
            </summary>
            <param name="idCard">要验证的身份证</param>
            <returns>，若字符串为空则也返回Fasle</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Enums.ToHexadecimal">
            <summary>
            转换成十六进制方式枚举
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Enums.ToHexadecimal.Loop">
            <summary>
            循环方式
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Enums.ToHexadecimal.BitConverter">
            <summary>
            BitConverter方式
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Enums.ToHexadecimal.ConvertAll">
            <summary>
            Array.ConvertAll方式
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Enums.Conversion">
            <summary>
            各个进制转换枚举
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Enums.Conversion.Binary">
            <summary>
            二进制
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Enums.Conversion.Octal">
            <summary>
            八进制
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Enums.Conversion.Decimal">
            <summary>
            十进制
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Enums.Conversion.Hexadecimal">
            <summary>
            十六进制
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Enums.Buttons">
            <summary>
            常用按钮
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Enums.Buttons.Close">
            <summary>
            关闭按钮
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Enums.Buttons.Back">
            <summary>
            返回按钮
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Enums.Buttons.Home">
            <summary>
            首页按钮
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Enums.Buttons.Register">
            <summary>
            注册按钮
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Enums.Buttons.Login">
            <summary>
            登陆按钮
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Enums.Formula">
            <summary>
            EnumFormula
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Enums.Formula.Add">
            <summary>
            加号
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Enums.Formula.Dec">
            <summary>
            减号
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Enums.Formula.Mul">
            <summary>
            乘号
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Enums.Formula.Div">
             <summary>
            除号
             </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Enums.Formula.Sin">
             <summary>
            正玄
             </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Enums.Formula.Cos">
            <summary>
            余玄
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Enums.Formula.Tan">
            <summary>
            正切
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Enums.Formula.ATan">
             <summary>
            余切
             </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Enums.Formula.Sqrt">
             <summary>
            平方根
             </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Enums.Formula.Pow">
            <summary>
            求幂
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Enums.Formula.None">
            <summary>
            无
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Enums.LogLevel">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Enums.LogLevel.Fatal">
            <summary>
            致命错误
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Enums.LogLevel.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Enums.LogLevel.Warning">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Enums.LogLevel.Information">
            <summary>
            信息
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Enums.LogLevel.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Models.EnumItem">
            <summary>
            键值对
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Models.EnumItem.name">
            <summary>
            键
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Models.EnumItem.value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Models.MenuStripItem">
            <summary>
            MenuStrip 构建实体类
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Models.MenuStripItem.ID">
            <summary>
            标识ID
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Models.MenuStripItem.FATHER_ID">
            <summary>
            父ID
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Models.MenuStripItem.MENU_NAME">
            <summary>
            MENU名称
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Models.MenuStripItem.MENU_TEXT">
            <summary>
            MENU文本描述
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Models.MenuStripItem.ACTION_NAME">
            <summary>
            关联命令名称
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Models.TipMessage">
            <summary>
            SplashForm 提示消息
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Models.TipMessage.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="caption">标题</param>
            <param name="message">消息</param>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Models.TipMessage.Caption">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Models.TipMessage.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Models.Validation">
            <summary>
            参数验证实体类
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Models.Validation.IsValid">
            <summary>
            是否可用
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Models.VerifyImageInfo">
            <summary>
            验证码图片信息
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Models.VerifyImageInfo.Image">
            <summary>
            生成出的图片
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Models.VerifyImageInfo.ContentType">
            <summary>
            输出的图片类型，如 image/pjpeg
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Models.VerifyImageInfo.ImageFormat">
            <summary>
            图片的格式
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.MSSQLHelper">
            <summary>
            MS SQL帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.MSSQLHelper.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="msconString">连接字符串</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.MSSQLHelper.ExecuteNonQuery(System.String,System.Data.Common.DbParameter[])">
             <summary>
             执行sql语句，返回影响行数
            <para>eg: string sql = "INSERT INTO Test(Name,TypeName)values(@Name,@TypeName)"; </para>
            <para> SqlParameter[] parameters = new SqlParameter[]{   new SqlParameter("@Name",c+i.ToString()),  new SqlParameter("@TypeName",c.ToString())}</para>
             </summary>
             <param name="sql">sql语句</param>
             <param name="parameters">参数</param>
             <returns>影响行数</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.MSSQLHelper.ExecuteReader(System.String,System.Data.Common.DbParameter[])">
            <summary>
            ExecuteReader
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">参数</param>
            <returns>IDataReader</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.MSSQLHelper.ExecuteDataTable(System.String,System.Data.Common.DbParameter[])">
            <summary>
            ExecuteDataTable
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.MSSQLHelper.ExecuteScalar(System.String,System.Data.Common.DbParameter[])">
            <summary>
            ExecuteScalar
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">参数</param>
            <returns>Object</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.MSSQLHelper.BatchInert(System.String,System.Data.DataTable,System.Int32)">
            <summary>
            批量插入
            </summary>
            <param name="desTable">数据库目标表</param>
            <param name="dt">需要插入的表</param>
            <param name="batchSize">批量插入数量</param>
            <returns>影响行数</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.NetWorkHelper">
            <summary>
            基于.NET 2.0的NetWork工具类
            参考：http://www.cnblogs.com/feiyun126/archive/2013/02/20/2918247.html
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.NetWorkHelper.GetMacAddress(System.Net.NetworkInformation.NetworkInterfaceType,System.Func{System.String,System.String})">
            <summary>
            根据网卡类型来获取mac地址
            </summary>
            <param name="networkType">网卡类型</param>
            <param name="macAddressFormatHanlder">格式化获取到的mac地址</param>
            <returns>获取到的mac地址</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.NetWorkHelper.GetMacAddress(System.Net.NetworkInformation.NetworkInterfaceType,System.Net.NetworkInformation.OperationalStatus,System.Func{System.String,System.String})">
             <summary>
             根据网卡类型以及网卡状态获取mac地址
             </summary>
             <param name="networkType">网卡类型</param>
             <param name="status">网卡状态</param>
            Up 网络接口已运行，可以传输数据包。
            Down 网络接口无法传输数据包。
            Testing 网络接口正在运行测试。
            Unknown 网络接口的状态未知。
            Dormant 网络接口不处于传输数据包的状态；它正等待外部事件。
            NotPresent 由于缺少组件（通常为硬件组件），网络接口无法传输数据包。
            LowerLayerDown 网络接口无法传输数据包，因为它运行在一个或多个其他接口之上，而这些“低层”接口中至少有一个已关闭。
             <param name="macAddressFormatHanlder">格式化获取到的mac地址</param>
             <returns>获取到的mac地址</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.NetWorkHelper.GetMacAddress(System.Func{System.String,System.String})">
            <summary>
            获取读到的第一个mac地址
            </summary>
            <returns>获取到的mac地址</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.NetWorkHelper.GetIPAddress(System.String)">
            <summary>
            判断是否是合法的IP4,IP6地址
            </summary>
            <param name="ip">需要判断的字符串</param>
            <returns>合法则返回host部分，若不合法则返回空</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.NumberHelper">
            <summary>
            Number帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.NumberHelper.IsNaturalNumber(System.String)">
            <summary>
            是否是大于等于零的整数
            </summary>
            <param name="item">需要判断项</param>
            <returns>是否是大于等于零的整数</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.NumberHelper.IsWholeNumber(System.String)">
            <summary>
            是否是正整数
            </summary>
            <param name="item">需要判断项</param>
            <returns>是否是正整数</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.NumberHelper.IsInteger(System.String)">
            <summary>
            是否是正整数或负整数
            </summary>
            <param name="item">需要判断项</param>
            <returns>是否是正整数或负整数</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.NumberHelper.IsNumber(System.String)">
            <summary>
            是否是数字
            </summary>
            <param name="item">需要判断项</param>
            <returns>是否是数字</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.NumberHelper.IsEven(System.Int32)">
            <summary>
            是否是偶数
            </summary>
            <param name="value">需要判断项</param>
            <returns>是否是偶数</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.NumberHelper.IsOdd(System.Int32)">
            <summary>
            是否是奇数
            </summary>
            <param name="value">需要判断项</param>
            <returns>是否是奇数</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.NumberHelper.Random(System.Boolean)">
            <summary>
            产生随机数
            </summary>
            <param name="noZeros">是否包括0</param>
            <returns>随机数</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.NumberHelper.Random(System.Int32)">
            <summary>
            生成随机数【包括下限】
            </summary>
            <param name="high">随机数上限</param>
            <returns>随机数</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.NumberHelper.Random(System.Int32,System.Int32)">
            <summary>
            生成随机数【包括上下限】
            </summary>
            <param name="low">下限</param>
            <param name="high">上线</param>
            <returns>随机数</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.NumberHelper.Random">
             <summary>
            生成double类型的随机数
             </summary>
             <returns>double类型的随机数</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.NumberHelper.GetVal(System.Object)">
            <summary>
            转换为int，如不能转换返回0
            </summary>
            <param name="src">操作值</param>
            <returns>转换值</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.NumberHelper.GetVal(System.Object,System.Int32)">
            <summary>
            转换为int，如不能转换返回给定的值
            </summary>
            <param name="src">操作值</param>
            <param name="defaultVal">给定值</param>
            <returns>转换值</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.NumberHelper.GetByte(System.Object)">
            <summary>
            转换为byte，如不能转换返回0
            </summary>
            <param name="src">操作值</param>
            <returns>转换值</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.NumberHelper.GetByte(System.Object,System.Byte)">
            <summary>
            转换为byte，如不能转换返给定的值
            </summary>
            <param name="src">操作值</param>
            <param name="defaultVal">给定值</param>
            <returns>转换值</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.NumberHelper.GetDecimal(System.Object)">
            <summary>
            转换为decimal，如不能转换返回0
            </summary>
            <param name="src">操作值</param>
            <returns>转换值</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.NumberHelper.GetDouble(System.Object)">
            <summary>
            转换为double，如不能转换返回0
            </summary>
            <param name="src">操作值</param>
            <returns>转换值</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.NumberHelper.AutoIncrementIndex(System.String)">
            <summary>
            自动累加流水号
            自動累加Index, 如果string尾是数字会依序自动累加，若末尾一位不是数字则自动添加数字
            eg:
            abcd2-->abcd3
            参考链接：http://www.dotblogs.com.tw/neptunic/archive/2010/12/26/autoincrementindex.aspx
            </summary>
            <param name="Input">流水号</param>
            <returns>自动累加流水号</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.NumberHelper.ToPercent(System.Int32,System.Int32)">
             <summary>
            计算百分比保留两位小数
             </summary>
             <param name="number">除数</param>
             <param name="dividendValue">被除数</param>
             <returns>百分比;eg:99.7%</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.ObjectHelper">
            <summary>
            基于.NET 2.0的OBJECT帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ObjectHelper.CheckNullToString(System.Object,System.String,System.String)">
            <summary>
            判断object对象是否为Null，如果是NULL则返回faileValue，反之sucessValue
            </summary>
            <param name="value">需要转换的object</param>
            <param name="sucessValue">不等于NULL的时候返回的值</param>
            <param name="faileValue">等于NULL的时候返回的值</param>
            <returns>逻辑判断后返回值</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ObjectHelper.CheckNullToInt(System.Object,System.Int32,System.Int32)">
            <summary>
            判断object对象是否为Null，如果是NULL则返回faileValue，反之sucessValue
            </summary>
            <param name="value">需要转换的object</param>
            <param name="sucessValue">不等于NULL的时候返回的值</param>
            <param name="faileValue">等于NULL的时候返回的值</param>
            <returns>逻辑判断后返回值</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ObjectHelper.DeepCopy``1(``0)">
            <summary>
            对象深拷贝
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="obj">Object</param>
            <returns>Object</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ObjectHelper.IsNumeric(System.Object)">
            <summary>
            判断对象是否是数字类型
            </summary>
            <param name="obj">object</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ObjectHelper.CompareObject(System.Object,System.Object)">
            <summary>
            对象比较
            </summary>
            <param name="obj1">对象一</param>
            <param name="obj2">对象二</param>
            <returns>是否相等</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.OLEDBExcelHelper">
            <summary>
            EXCEL 操作帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.OLEDBExcelHelper.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="excelPath">EXCEL路径</param>
            <param name="x64Version">是否是64位操作系统</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.OLEDBExcelHelper.BuilderConnectionString">
            <summary>
            创建链接字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.OLEDBExcelHelper.ExecuteNonQuery(System.String)">
            <summary>
            Excel操作_添加，修改
            DELETE不支持
            </summary>
            <param name="sql">sql语句</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.OLEDBExcelHelper.GetExcelSheetNames">
            <summary>
            获取EXCEL内sheet集合
            </summary>
            <returns>sheet集合</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.OLEDBExcelHelper.ExecuteDataTable(System.String)">
             <summary>
             读取sheet
            <para> eg:select * from [Sheet1$]</para>
             </summary>
             <param name="sql">sql语句</param>
             <returns>DataTable</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.OLEDBExcelHelper.ExecuteDataSet">
            <summary>
            获取excel所有sheet数据
            </summary>
            <returns>DataSet</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.PinyingHelper">
            <summary>
            汉字拼音帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.PinyingHelper.GetPinyin(System.String)">
            <summary>
            获得汉字的拼音，如果输入的是英文字符将原样输出，中文标点符号将被忽略
            </summary>
            <param name="chineseChars">汉字字符串</param>
            <returns>拼音</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.PinyingHelper.GetShortPinyin(System.String)">
            <summary>
            获得汉字拼音的简写，即每一个汉字的拼音的首字母组成的串，如果输入的是英文字符将原样输出，中文标点符号将被忽略
            </summary>
            <param name="chineseChars">汉字字符串</param>
            <returns>拼音简写</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Tool.NotifyPropertyChanged">
            <summary>
            向客户端发出某一属性值已更改的通知。
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Tool.NotifyPropertyChanged.NotifyChanged(System.String)">
            <summary>
            需要向客户端通知的属性名称
            </summary>
            <param name="propertyName">属性名称</param>
        </member>
        <member name="E:YanZhiwei.DotNet2.Utilities.Tool.NotifyPropertyChanged.PropertyChanged">
            <summary>
            向客户端发出某一属性值已更改的通知事件
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Tool.MapOffsetComparer.Compare(System.Object,System.Object)">
            <summary>
            Compare
            </summary>
            <param name="x">object</param>
            <param name="y">object</param>
            <returns></returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.RandomHelper">
            <summary>
            基于.NET 2.0的Random的工具类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.RandomHelper.NextDouble(System.Random,System.Double,System.Double)">
            <summary>
            生成设置范围内的Double的随机数
            eg:_random.NextDouble(1.5, 2.5)
            </summary>
            <param name="random">Random</param>
            <param name="miniDouble">生成随机数的最大值</param>
            <param name="maxiDouble">生成随机数的最小值</param>
            <returns>当Random等于NULL的时候返回0;</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.RandomHelper.NetxtString(System.Random,System.Int32,System.Boolean)">
            <summary>
            生成随机字符串
            </summary>
            <param name="random">Random</param>
            <param name="size">字符串长度</param>
            <param name="lowerCase">字符串是小写</param>
            <returns>随机字符串</returns>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Common.RandomHelper.RandomString_09AZ">
            <summary>
            0~9 A~Z字符串
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.RandomHelper.NetxtString(System.Random,System.String,System.Int32,System.Boolean)">
            <summary>
            依据指定字符串来生成随机字符串
            </summary>
            <param name="random">Random</param>
            <param name="randomString">指定字符串</param>
            <param name="size">字符串长度</param>
            <param name="lowerCase">字符串是小写</param>
            <returns>随机字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.RandomHelper.NextDateTime">
            <summary>
            生成随机时间
            </summary>
            <returns>随机时间</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.ReflectHelper">
            <summary>
            反射帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ReflectHelper.GetDisplayName``1">
            <summary>
            获取实体类[DisplayName]以及本身Name
            </summary>
            <typeparam name="T">实体类</typeparam>
            <returns>IDictionary</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ReflectHelper.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            反射调用方法
            </summary>
            <param name="obj">需反射类型</param>
            <param name="methodName">调用方法名称</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ReflectHelper.SetField(System.Object,System.String,System.Object)">
            <summary>
            反射设置值
            </summary>
            <param name="obj">操作对象</param>
            <param name="name">名称</param>
            <param name="value">值</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ReflectHelper.GetField(System.Object,System.String)">
            <summary>
            反射获取值
            </summary>
            <param name="obj">操作对象</param>
            <param name="name">需要获取值的名称</param>
            <returns>值</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ReflectHelper.ContainProperty(System.Object,System.String)">
            <summary>
            利用反射来判断对象是否包含某个属性
            </summary>
            <param name="instance">object</param>
            <param name="propertyName">需要判断的属性</param>
            <returns>是否包含</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.RegexHelper">
            <summary>
            基于.NET 2.0的正则表达式工具类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.RegexHelper.IsMatch(System.String,System.String)">
            <summary>
            正则表达式匹配，匹配返回true
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.RegexHelper.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            正则表达式匹配，匹配返回true
            </summary>
            <param name="input">输入的字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="options">筛选条件</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.RegexHelper.IsMatch(System.String,System.String,System.Text.RegularExpressions.Match@)">
            <summary>
            正则表达式匹配，匹配返回true
            </summary>
            <param name="input">输入的字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="result">若匹配成功，则返回Match</param>
            <returns>匹配是否成功</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.SectionHelper">
            <summary>
            基于.NET 2.0的配置文件 Section节点操作工具类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.SectionHelper.#ctor(System.String)">
             <summary>
            构造函数
             </summary>
             <param name="sectionName">section名称</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.SectionHelper.ContainSection">
            <summary>
            是否包含该Section
            </summary>
            <returns></returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.SectionHelper.ContainKey(System.String)">
            <summary>
            Section是否包含Key
            </summary>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.SectionHelper.GetValue(System.String)">
            <summary>
            根据键获取值
            </summary>
            <param name="Key">键</param>
            <returns>当不存在键的时候，返回string.Empty</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.SerializeHelper">
            <summary>
            序列化帮助类
            <para>tooltip:</para>
            <para>[XmlAttribute("id")]==><XmlDocRoot id="1" /></para>
            <para>[XmlIgnore()]</para>
            <para>[XmlArrayItem("ListItem", typeof(string))]</para>
            <para>[XmlArray("List")]</para>
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.SerializeHelper.ToXML``1(System.String,System.Collections.Generic.IList{``0})">
            <summary>
            将集合序列化成xml
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="savePath">保存路径</param>
            <param name="collection">数据</param>
        </member>
        <!-- 对于成员“M:YanZhiwei.DotNet2.Utilities.Common.SerializeHelper.XMLToCollection``1(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.SerializeHelper.XMLToObject``1(System.String)">
            <summary>
            将xml反序列化为实体类型
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="path">xml路径</param>
            <returns>实体</returns>
        </member>
        <!-- 对于成员“M:YanZhiwei.DotNet2.Utilities.Common.SerializeHelper.BinaryToCollection``1(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.SerializeHelper.BinaryToDataTable(System.String)">
            <summary>
            将Binary文件反序列化成datatable
            </summary>
            <param name="path">Binary文件路径</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.SerializeHelper.ToXML``1(System.String,``0)">
            <summary>
            将实体类序列化成xml
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="savePath">xml保存路径</param>
            <param name="t">实体类型</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.SerializeHelper.ToBinary``1(System.String,System.Collections.Generic.IList{``0})">
            <summary>
            将实体类集合序列化成Binary文件
            </summary>
            <typeparam name="T">实体类类型</typeparam>
            <param name="savePath">保存路径</param>
            <param name="collection">IList</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.SerializeHelper.ToBinary(System.String,System.Data.DataTable)">
            <summary>
            将datatable序列化Binary文件
            </summary>
            <param name="savePath">Binary文件保存论据</param>
            <param name="datatable">需要被序列化的datatable</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.SerializeHelper.XMLToString(System.String)">
            <summary>
            将xml文件转换string类型
            </summary>
            <param name="path">路径</param>
            <returns>string</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.SerializeHelper.SerializeString(System.Object)">
            <summary>
            将对象序列化成字符串
            </summary>
            <param name="obj">object</param>
            <returns>string</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.SerialPortHelper">
            <summary>
            基于.NET 2.0的串口工具类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.SerialPortHelper.Open(System.IO.Ports.SerialPort,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            打开串口
            </summary>
            <param name="serialPort">串口</param>
            <param name="portName">需要打开串口的名称</param>
            <param name="dateBits">数据位</param>
            <param name="bondRate">波特率</param>
            <param name="parity">效验</param>
            <param name="stopBit">停止位</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.SerialPortHelper.Close(System.IO.Ports.SerialPort,System.String)">
            <summary>
            关闭串口
            </summary>
            <param name="serialPort">串口组件</param>
            <param name="portName">需要关闭的串口名称</param>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Common.SerialPortHelper.PortNames">
            <summary>
            串口列表
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Common.SerialPortHelper.Paritys_CH">
            <summary>
            效验_中文
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Common.SerialPortHelper.Paritys">
            <summary>
            效验_英文
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Common.SerialPortHelper.StopBits_CH">
            <summary>
            停止位_英文转移成数字
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Common.SerialPortHelper.StopBits">
            <summary>
            停止位
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Common.SerialPortHelper.BaudRates">
            <summary>
            波特率
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Common.SerialPortHelper.DataBits">
            <summary>
            数据位
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.StringHelper">
            <summary>
            基于.NET 2.0的string帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringHelper.StringReverse(System.String)">
            <summary>
            字符串逆转
            </summary>
            <param name="str">需要逆转的字符串</param>
            <returns>逆转后的字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringHelper.FormatDateTimeBCD(System.String)">
             <summary>
            <para>Byte[0]=秒，Byte[1]=分，Byte[2]=时，Byte[3]=日，Byte[4]=月，Byte[5,6]=年</para>
            <para>为秒、分、时、日、月、年的BCD码</para>
            <para> 如：22 21 20 18 11 12 20=2012年11月12日20时21分22秒</para>
             </summary>
             <param name="dateTime">表示时间的BCD码</param>
             <returns>如：22 21 20 18 11 12 20=2012年11月12日20时21分22秒</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringHelper.DateTimeBCDFormart(System.DateTime)">
            <summary>
            将dateTime转换其对应的BCD码
            </summary>
            <param name="dateTime">DateTime</param>
            <returns>BCD码</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringHelper.ExchangeHightToLow(System.String)">
             <summary>
             四位长度的字符串高低位互换
            <para>eg:1122 ==>2211</para>
             </summary>
             <param name="opString">需要操作的字符串</param>
             <returns>高低位互换字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringHelper.MaxThanDecimal(System.String,System.Decimal@,System.Int32)">
             <summary>
             检查decimal 在符号.之前有多少长度
            <para>eg:12.121表示两个长度</para>
             </summary>
             <param name="decimalStr">需要检查的decimal</param>
             <param name="val">返回的decimal</param>
             <param name="decimalLen"> 至少多少长度eg:12.121表示两个长度</param>
             <returns></returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringHelper.ExceptBlanks(System.String)">
            <summary>
            清除字符串内空格
            </summary>
            <param name="opString">需要处理的字符串</param>
            <returns>处理好后的字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringHelper.InvalidFileNameChars(System.String)">
            <summary>
            判断文件路径中是否包含非法字符
            <para>参考:http://msdn.microsoft.com/en-us/library/aa365247.aspx</para>
            </summary>
            <param name="fileName">文件路径</param>
            <returns>是否包含非法字符</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringHelper.ReverseUsingArrayClass(System.String)">
            <summary>
            利用Array.Reverse反转字符串
            </summary>
            <param name="opString">操作字符串</param>
            <returns>反转字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringHelper.ReverseUsingCharacterBuffer(System.String)">
            <summary>
            利用遍历反转字符串
            </summary>
            <param name="opString">操作字符串</param>
            <returns>反转字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringHelper.ReverseUsingStringBuilder(System.String)">
            <summary>
            利用StringBuilder反转字符串
            </summary>
            <param name="opString">操作字符串</param>
            <returns>反转字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringHelper.ReverseUsingStack(System.String)">
            <summary>
            利用Stack反转字符串
            </summary>
            <param name="opString">操作字符串</param>
            <returns>反转字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringHelper.ReverseUsingXOR(System.String)">
            <summary>
            利用XOR反转字符串
            </summary>
            <param name="opString">操作字符串</param>
            <returns>反转字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringHelper.BuilderDelimiter(System.String,System.Char)">
            <summary>
            对字符串遍历分割
            </summary>
            <param name="opString">需要分割的字符串</param>
            <param name="delimiter">每个字符分割符号</param>
            <returns>分割好的字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringHelper.LoopString(System.String,System.Func{System.Char,System.Char})">
            <summary>
            遍历字符串
            </summary>
            <param name="opString">需要遍历的字符串</param>
            <param name="loopStringHandle">带char类型的输入类型参数的委托</param>
            <returns>处理好的字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringHelper.ValidIndex(System.String,System.Int32,System.Predicate{System.Char})">
            <summary>
            遍历字符串，查找出字符串中符合委托的索引
            </summary>
            <param name="str"></param>
            <param name="offset">偏移量</param>
            <param name="stringIndexRuleHandle">委托</param>
            <returns>符合委托规则的会合Index</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringHelper.WrapText(System.String,System.Int32)">
            <summary>
            文字换行
            </summary>
            <param name="text">需要换行的文字</param>
            <param name="maxWidth">多少长度换行</param>
            <returns>换行好的文字</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringHelper.SubstrIndexOf(System.String,System.Char)">
            <summary>
            按照符号截取字符串
            eg:
            ex.Message.ToString().SubstrIndexOf('\r')
            参数：'串口名称'不能等于'请选择串口'\r\n参数名: 串口名称
            ==>
            参数：'串口名称'不能等于'请选择串口'
            </summary>
            <param name="str">需要截取的字符串</param>
            <param name="delimiter">判断符号</param>
            <returns>截取好的字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringHelper.SubstrLastIndexOf(System.String,System.Char)">
            <summary>
            按照最后符号截取字符串
            </summary>
            <param name="str">需要截取的字符串</param>
            <param name="delimiter">判断符号</param>
            <returns>截取好的字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringHelper.ToMD5(System.String)">
            <summary>
            获取MD5加密字符串
            参考：http://www.dotblogs.com.tw/chhuang/archive/2008/05/17/4029.aspx
            </summary>
            <param name="source">需要加密的字符串</param>
            <returns>MD5加密的字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringHelper.IsBetween(System.String,System.Int32,System.Int32)">
            <summary>
            判断string类型的字符串，是否在数字范围内（不包括等于）
            </summary>
            <param name="number">需要判断的字符串</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringHelper.CanParseInt(System.String)">
            <summary>
            判断字符串是否能转换成int类型
            </summary>
            <param name="number">需要判断的字符串</param>
            <returns>能否转化</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringHelper.HasChinese(System.String)">
            <summary>
            判断字符串中是否包含中文
            </summary>
            <param name="str">需要判断的字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringHelper.ParseThousandthString(System.String)">
            <summary>
            将千分位字符串转换成数字
            说明：将诸如"–111,222,333的千分位"转换成-111222333数字
            若转换失败则返回-1
            </summary>
            <param name="thousandthStr">需要转换的千分位</param>
            <returns>数字</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringHelper.RemoveLastChar(System.String,System.String)">
            <summary>
            移除字符串末尾指定字符
            </summary>
            <param name="str">需要移除的字符串</param>
            <param name="value">指定字符</param>
            <returns>移除后的字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringHelper.EqualLength(System.String,System.Int32)">
            <summary>
            判断字符串长度
            </summary>
            <param name="str">需要判断的字符串</param>
            <param name="length">需要等于的长度</param>
            <returns>是否等于期待的字符串长度</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringHelper.IsHexString(System.String)">
            <summary>
            判断是否是十六进制字符串
            </summary>
            <param name="str">需要判断的字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringHelper.Substring(System.String,System.Int32)">
            <summary>
            截取字符串
            </summary>
            <param name="originalString">需要截取的字符串</param>
            <param name="maxLen">字符串最大长度，超过最大长度则以'...'表示</param>
            <returns>截取后字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringHelper.ComplementZero(System.String,System.Int32)">
            <summary>
            补足位数_右边
            </summary>
            <param name="dataString">需要操作的字符串</param>
            <param name="targetLength">目标长度</param>
            <returns>操作完成后字符串</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.StringHelper.ComplementLeftZero(System.String,System.Int32)">
            <summary>
            补足位数_左边
            </summary>
            <param name="dataString">需要操作的字符串</param>
            <param name="targetLength">目标长度</param>
            <returns>操作完成后字符串</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeDictionary`1">
            <summary>
            基于.NET 2.0的对于Dictionary线程安全操作工具类
            说明
            默认读锁超时1000毫秒
            默认写锁超时1000毫秒
            .NET 4.0+ 可以使用ConcurrentDictionary来实现。
            </summary>
            <typeparam name="T">泛型</typeparam>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeDictionary`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeDictionary`1.#ctor(System.Int32,System.Int32)">
            <summary>
            带参构造函数
            </summary>
            <param name="_readerTimeout">读锁超时设置【单位毫秒】</param>
            <param name="_writerTimeout">写锁超时设置【单位毫秒】</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeDictionary`1.Add(System.String,`0)">
            <summary>
            Add【线程安全】
            默认超时1000毫秒
            </summary>
            <param name="key">键</param>
            <param name="val">值</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeDictionary`1.Add(System.String,`0,System.Int32)">
            <summary>
            Add【线程安全】
            </summary>
            <param name="key">键</param>
            <param name="val">值</param>
            <param name="timeout">超时设置【毫秒】</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeDictionary`1.Get(System.String)">
            <summary>
            Get【线程安全】
            默认超时1000毫秒
            </summary>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeDictionary`1.Get(System.String,System.Int32)">
            <summary>
            Get【线程安全】
            </summary>
            <param name="key">键</param>
            <param name="timeout">超时设置【毫秒】</param>
            <returns>值</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeDictionary`1.Remove(System.String)">
            <summary>
            Remove【线程安全】
            默认超时1000毫秒
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeDictionary`1.Remove(System.String,System.Int32)">
            <summary>
            Remove【线程安全】
            </summary>
            <param name="key">键</param>
            <param name="timeout">超时设置【毫秒】</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeDictionary`1.Clear">
            <summary>
            Clear【线程安全】
            默认超时1000毫秒
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeDictionary`1.Clear(System.Int32)">
            <summary>
            Clear【线程安全】
            </summary>
            <param name="timeout">超时设置【毫秒】</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeDictionary`1.ContainsKey(System.String)">
            <summary>
            ContainsKey【线程安全】
            默认超时1000毫秒
            </summary>
            <param name="key">键</param>
            <returns>是否包含</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeDictionary`1.ContainsKey(System.String,System.Int32)">
            <summary>
            ContainsKey【线程安全】
            </summary>
            <param name="key">键</param>
            <param name="timeout">超时设置【毫秒】</param>
            <returns>是否包含</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeDictionary`1.Count">
            <summary>
            Count【线程安全】
            默认超时1000毫秒
            </summary>
            <returns></returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeDictionary`1.Count(System.Int32)">
            <summary>
            Count【线程安全】
            </summary>
            <param name="timeout">超时设置【毫秒】</param>
            <returns>Count</returns>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeDictionary`1.Item(System.String)">
            <summary>
            This【线程安全】
            </summary>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeEnumerableHelper`1">
            <summary>
            IEnumerable的线程安全的实现
            参考: http://www.codeproject.com/KB/cs/safe_enumerable.aspx
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeEnumerableHelper`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Object)">
            <summary>
            ThreadSafeEnumerable构造函数
            </summary>
            <param name="inner">IEnumerable</param>
            <param name="lock">object</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeEnumerableHelper`1.GetEnumerator">
            <summary>
            GetEnumerator
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeEnumerator`1">
            <summary>
            基于IEnumerator的线程安全的实现
            参考: http://www.codeproject.com/KB/cs/safe_enumerable.aspx
                  http://theburningmonk.com/2010/03/thread-safe-enumeration-in-csharp/
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeEnumerator`1.#ctor(System.Collections.Generic.IEnumerator{`0},System.Object)">
            <summary>
            ThreadSafeEnumerator构造函数
            </summary>
            <param name="inner">IEnumerator</param>
            <param name="lock">object</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeEnumerator`1.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeEnumerator`1.MoveNext">
            <summary>
            MoveNext
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeEnumerator`1.Reset">
            <summary>
            Reset
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeEnumerator`1.Current">
            <summary>
            返回当前类型
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeList`1">
             <summary>
             IList的线程的实现
            <para>参考: http://www.codeproject.com/KB/cs/safe_enumerable.aspx </para>
             </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeList`1.#ctor">
            <summary>
            ThreadSafeList构造函数
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            ThreadSafeList构造函数
            </summary>
            <param name="self"></param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeList`1.Add(`0)">
            <remarks>
            添加
            </remarks>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeList`1.Clear">
            <summary>
            移出所有元素
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeList`1.Contains(`0)">
            <summary>
            是否包含某项元素
            </summary>
            <param name="item">item</param>
            <returns>是否包含</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeList`1.CopyTo(`0[],System.Int32)">
            <summary>
            复制到某个类型数组
            </summary>
            <param name="array">复制到苏族</param>
            <param name="arrayIndex">开始位置</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeList`1.Remove(`0)">
            <summary>
            移除
            </summary>
            <param name="item">需要移除项</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeList`1.GetEnumerator">
            <summary>
            GetEnumerator
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeList`1.IndexOf(`0)">
            <summary>
            IndexOf
            </summary>
            <param name="item">索引项</param>
            <returns>索引位置</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeList`1.Insert(System.Int32,`0)">
            <summary>
            插入一项
            </summary>
            <param name="index">插入位置</param>
            <param name="item">插入项</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeList`1.RemoveAt(System.Int32)">
            <summary>
            RemoveAt
            </summary>
            <param name="index">index</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            RemoveAll
            </summary>
            <param name="match">Predicate委托</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeList`1.AsReadOnly">
            <summary>
            AsReadOnly
            </summary>
            <returns>ReadOnlyCollection</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeList`1.ForEach(System.Action{`0})">
            <summary>
            ForEach
            </summary>
            <param name="action">委托</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeList`1.Exists(System.Predicate{`0})">
            <summary>
            Exists
            </summary>
            <param name="match">委托</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeList`1.FindAll(System.Predicate{`0})">
            <summary>
            FindAll
            </summary>
            <param name="match">委托</param>
            <returns>查找到的集合</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeList`1.Find(System.Predicate{`0})">
            <summary>
            Find
            </summary>
            <param name="match">委托</param>
            <returns>查找到项</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeList`1.AddUniqueTF(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            去重复集合添加
            </summary>
            <param name="items">添加集合</param>
            <param name="comparaer">IComparer</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeList`1.Add(`0,System.Predicate{`0})">
             <summary>
             先判断是否存在集合里面，若存在则移出，然后重新添加
            <para>eg:personList.Add(_person, p => p.Age == 19);</para>
             </summary>
             <param name="t">泛型</param>
             <param name="match">委托</param>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeList`1.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeList`1.IsReadOnly">
            <summary>
            IsReadOnly
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeList`1.Item(System.Int32)">
            <summary>
            this线程安全
            </summary>
            <param name="index">index</param>
            <returns>T</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeQueue`1">
            <summary>
            Queue线程安全实现
            说明
            默认读锁超时1000毫秒
            默认写锁超时1000毫秒
            </summary>
            <typeparam name="T">泛型</typeparam>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeQueue`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeQueue`1.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="capacity">初始容量</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            构造函数
            </summary>
            <param name="collection">IEnumerable</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeQueue`1.GetEnumerator">
            <summary>
            GetEnumerator【线程安全】
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeQueue`1.Enqueue(`0)">
            <summary>
            Enqueue【线程安全】
            </summary>
            <param name="item">泛型</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeQueue`1.Dequeue">
            <summary>
            Dequeue【线程安全】
            </summary>
            <returns>泛型</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeQueue`1.EnqueueAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            EnqueueAll【线程安全】
            </summary>
            <param name="ItemsToQueue">IEnumerable</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeQueue`1.EnqueueAll(System.Collections.Generic.IList{`0})">
            <summary>
            EnqueueAll【线程安全】
            </summary>
            <param name="ItemsToQueue">IList</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeQueue`1.DequeueAll">
            <summary>
            DequeueAll【线程安全】
            </summary>
            <returns>IList</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ThreadSafeQueue`1.Count">
            <summary>
            Count 【线程安全】
            </summary>
            <returns></returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.TimeSpanHelper">
            <summary>
            基于.NET 2.0的TimeSpan工具类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.TimeSpanHelper.AddSeconds(System.TimeSpan,System.Int32)">
            <summary>
            基于秒的对于TimeSpan操作
            </summary>
            <param name="ts">TimeSpan</param>
            <param name="seconds">秒</param>
            <returns>TimeSpan</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.TimeSpanHelper.AddMinutes(System.TimeSpan,System.Int32)">
            <summary>
            基于分钟的对于TimeSpan操作
            </summary>
            <param name="ts">TimeSpan</param>
            <param name="minutes">分钟</param>
            <returns>TimeSpan</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.TimeSpanHelper.AddHours(System.TimeSpan,System.Int32)">
            <summary>
            基于小时的对于TimeSpan操作
            </summary>
            <param name="ts">TimeSpan</param>
            <param name="hours">小时</param>
            <returns>TimeSpan</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Tool.UBinder">
            <summary>
            SerializationBinder重写
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Tool.UBinder.BindToType(System.String,System.String)">
            <summary>
            BindToType重写
            </summary>
            <param name="assemblyName">assemblyName</param>
            <param name="typeName">typeName</param>
            <returns>Type</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.ValidateBaseHelper">
            <summary>
            基于.NET 2.0 的参数验证帮助类
            参考：http://www.dotblogs.com.tw/kirkchen/archive/2010/03/04/13887.aspx?fid=54791
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ValidateBaseHelper.Begin">
            <summary>
            验证初始化
            </summary>
            <returns></returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ValidateBaseHelper.Check(YanZhiwei.DotNet2.Utilities.Models.Validation,System.Func{System.Boolean},System.String)">
            <summary>
            参数验证
            </summary>
            <param name="validation">Validation</param>
            <param name="filterMethod">返回BOOL类型的委托</param>
            <param name="argumentName">参数名称</param>
            <returns>Validation</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ValidateBaseHelper.NotNull(YanZhiwei.DotNet2.Utilities.Models.Validation,System.Object,System.String)">
            <summary>
            验证非空
            </summary>
            <param name="validation">Validation</param>
            <param name="obj">输入项</param>
            <param name="argumentName">参数名称</param>
            <returns>Validation</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ValidateBaseHelper.NotNullOrEmpty(YanZhiwei.DotNet2.Utilities.Models.Validation,System.String,System.String)">
            <summary>
            不能为空或者NULL验证
            </summary>
            <param name="validation">Validation</param>
            <param name="input">输入项</param>
            <param name="argumentName">参数名称</param>
            <returns>Validation</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ValidateBaseHelper.NotEqual(YanZhiwei.DotNet2.Utilities.Models.Validation,System.Object,System.Object,System.String)">
            <summary>
            验证参数不能等于某个值
            </summary>
            <param name="validation">Validation</param>
            <param name="obj">输入项</param>
            <param name="equalObj">比较项</param>
            <param name="argumentName">参数名称</param>
            <returns>Validation</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ValidateBaseHelper.InRange(YanZhiwei.DotNet2.Utilities.Models.Validation,System.Double,System.Double,System.Double,System.String)">
            <summary>
            验证是否在范围内
            </summary>
            <param name="validation">Validation</param>
            <param name="obj">输入项</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="argumentName">参数名称</param>
            <returns>Validation</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ValidateBaseHelper.RegexMatch(YanZhiwei.DotNet2.Utilities.Models.Validation,System.String,System.String,System.String)">
            <summary>
            需要验证的正则表达式
            </summary>
            <param name="validation">Validation</param>
            <param name="input">需要匹配的输入项</param>
            <param name="pattern">正则表达式</param>
            <param name="argumentName">参数名称</param>
            <returns>Validation</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ValidateBaseHelper.IsEmail(YanZhiwei.DotNet2.Utilities.Models.Validation,System.String,System.String)">
            <summary>
            是否是电子邮箱
            </summary>
            <param name="validation">Validation</param>
            <param name="email">需要验证的邮箱</param>
            <param name="argumentName">参数名称</param>
            <returns>Validation</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ValidateBaseHelper.IsURL(YanZhiwei.DotNet2.Utilities.Models.Validation,System.String,System.String)">
            <summary>
            是否是URL
            </summary>
            <param name="validation">Validation</param>
            <param name="url">url</param>
            <param name="argumentName">参数名称</param>
            <returns>Validation</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ValidateBaseHelper.IsFilePath(YanZhiwei.DotNet2.Utilities.Models.Validation,System.String,System.String)">
            <summary>
            是否是文件路径
            </summary>
            <param name="validation">Validation</param>
            <param name="path">路径</param>
            <param name="argumentName">参数名称</param>
            <returns>Validation</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ValidateBaseHelper.IsPoseCode(YanZhiwei.DotNet2.Utilities.Models.Validation,System.String,System.String)">
            <summary>
            是否是邮政编码
            </summary>
            <param name="validation">Validation</param>
            <param name="poseCode">邮政编码</param>
            <param name="argumentName">参数名称</param>
            <returns>Validation</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ValidateBaseHelper.IsIp(YanZhiwei.DotNet2.Utilities.Models.Validation,System.String,System.String)">
            <summary>
            是否是IP
            </summary>
            <param name="validation">Validation</param>
            <param name="ip">需要检测到IP</param>
            <param name="argumentName">参数名称</param>
            <returns>Validation</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ValidateBaseHelper.IsInt(YanZhiwei.DotNet2.Utilities.Models.Validation,System.String,System.String)">
            <summary>
            是否是整数
            </summary>
            <param name="validation">Validation</param>
            <param name="intString">需要检测的字符串</param>
            <param name="argumentName">参数名称</param>
            <returns>Validation</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ValidateBaseHelper.IsNumber(YanZhiwei.DotNet2.Utilities.Models.Validation,System.String,System.String)">
            <summary>
            是否是数字
            </summary>
            <param name="validation">Validation</param>
            <param name="intString">需要检测的字符串</param>
            <param name="argumentName">参数名称</param>
            <returns>Validation</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ValidateBaseHelper.IsChinses(YanZhiwei.DotNet2.Utilities.Models.Validation,System.String,System.String)">
            <summary>
            是否是中文
            </summary>
            <param name="validation">Validation</param>
            <param name="chinese">中文</param>
            <param name="argumentName">参数名称</param>
            <returns>Validation</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.ValidateBaseHelper.IsRequireLen(YanZhiwei.DotNet2.Utilities.Models.Validation,System.String,System.Int32,System.String)">
            <summary>
            判断字符串是否是要求的长度
            </summary>
            <param name="validation">Validation</param>
            <param name="input">验证的字符串</param>
            <param name="requireLength">要求的长度</param>
            <param name="argumentName">参数名称</param>
            <returns>Validation</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Common.VerifyImageHelper">
            <summary>
            验证码图片类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.VerifyImageHelper.GenerateImage(System.String,System.Int32,System.Int32,System.Drawing.Color,System.Int32)">
            <summary>
            生成验证码
            </summary>
            <param name="code">验证码包含字符</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <param name="bgcolor">背景颜色</param>
            <param name="textcolor">文本颜色</param>
            <returns></returns>
        </member>
        <!-- 对于成员“T:YanZhiwei.DotNet2.Utilities.Common.XMLHelper”忽略有格式错误的 XML 注释 -->
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.XMLHelper.Select(System.String)">
            <summary>
            xpath语法筛选节点
            </summary>
            <param name="xPath">xpath语法</param>
            <returns>XmlNode</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.XMLHelper.SelectNodeList(System.String)">
            <summary>
            xpath语法筛选节点集合
            </summary>
            <param name="xPath">xpath语法</param>
            <returns>XmlNodeList</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.XMLHelper.Create(System.String,System.String)">
            <summary>
            创建xml文件
            </summary>
            <param name="rootName">根节点名称</param>
            <param name="encode">encode编码</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.XMLHelper.CreateXmlDoc(System.String,System.String)">
            <summary>
            创建xml文件
            </summary>
            <param name="rootName">根节点名称</param>
            <param name="encode">encode编码</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.XMLHelper.LoadXmlDoc">
            <summary>
            加载xml文件
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.XMLHelper.Save">
            <summary>
            保存xml操作到文件
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.XMLHelper.CreateElec(System.String,System.String)">
            <summary>
            创建节点XmlElement『添加在跟节点后』
            </summary>
            <param name="elecName">节点名称</param>
            <param name="elecValue">节点数值</param>
            <returns>XmlElement</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.XMLHelper.CreateElement(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            在某个节点下添加节点
            </summary>
            <param name="_xmldocSelect">父节点</param>
            <param name="elecName">节点名称</param>
            <param name="elecValue">节点数值</param>
            <returns>XmlElement</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.XMLHelper.CreateElec(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            在某个节点下添加节点
            </summary>
            <param name="_xmldocSelect">父节点</param>
            <param name="elecName">节点名称</param>
            <param name="elecValue">节点数值</param>
            <returns>XmlElement</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.XMLHelper.SetAttribute(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            设置某个节点属性
            </summary>
            <param name="xElement">需要设置属性的节点</param>
            <param name="attrName">属性名称</param>
            <param name="attrValue">属性数值</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.XMLHelper.Check(System.String)">
            <summary>
            检查根据xpath语法筛选下是否存在该节点
            </summary>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.XMLHelper.ShowXml">
            <summary>
            将xml内容转换string输出
            </summary>
            <returns></returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.XMLHelper.FormatXml(System.String,System.String)">
            <summary>
            格式化xml内容显示
            </summary>
            <param name="xmlString">xml内容</param>
            <param name="encode">encode编码</param>
            <returns>string</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Common.XMLHelper.Loop(System.Xml.XmlNodeList,System.Action{System.Xml.XmlNode})">
            <summary>
            遍历节点集合
            </summary>
            <param name="nodeList">节点集合</param>
            <param name="xmlNode">需要对遍历节点的处理『委托』</param>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Tool.RegexPattern.FileCheck">
            <summary>
            文件路径检测正则表达式
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Tool.RegexPattern.EmailCheck">
            <summary>
            电子邮箱检测正则表达式
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Tool.RegexPattern.URLCheck">
            <summary>
            URL检测正则表达式
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Tool.RegexPattern.PostCodeCheck">
            <summary>
            邮政编码检测正则表达式
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Tool.RegexPattern.ChineseCheck">
            <summary>
            中文检测正则表达式
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Tool.RegexPattern.IpCheck">
            <summary>
            Ip检测正则表达式
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Tool.RegexPattern.Int">
            <summary>
            整数检测正则表达式
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Tool.RegexPattern.Number">
            <summary>
            数字检测正则表达式
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.Tool.Warning">
            <summary>
            应用程序异常
            <para>参考：http://www.cnblogs.com/xiadao521/p/4107895.html </para>
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Tool.Warning.#ctor(System.String)">
            <summary>
            初始化应用程序异常
            </summary>
            <param name="message">错误消息</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Tool.Warning.#ctor(System.String,System.String)">
            <summary>
            初始化应用程序异常
            </summary>
            <param name="message">错误消息</param>
            <param name="code">错误码</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Tool.Warning.#ctor(System.String,System.String,YanZhiwei.DotNet2.Utilities.Enums.LogLevel)">
            <summary>
            初始化应用程序异常
            </summary>
            <param name="message">错误消息</param>
            <param name="code">错误码</param>
            <param name="level">日志级别</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Tool.Warning.#ctor(System.Exception)">
            <summary>
            初始化应用程序异常
            </summary>
            <param name="exception">异常</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Tool.Warning.#ctor(System.String,System.String,System.Exception)">
            <summary>
            初始化应用程序异常
            </summary>
            <param name="message">错误消息</param>
            <param name="code">错误码</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Tool.Warning.#ctor(System.String,System.String,YanZhiwei.DotNet2.Utilities.Enums.LogLevel,System.Exception)">
            <summary>
            初始化应用程序异常
            </summary>
            <param name="message">错误消息</param>
            <param name="code">错误码</param>
            <param name="level">日志级别</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Tool.Warning.GetMessage">
            <summary>
            获取错误消息
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Tool.Warning.AppendSelfMessage(System.Text.StringBuilder)">
            <summary>
            添加本身消息
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Tool.Warning.AppendInnerMessage(System.Text.StringBuilder,System.Exception)">
            <summary>
            添加内部异常消息
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.Tool.Warning.GetData(System.Exception)">
            <summary>
            获取添加的额外数据
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.Tool.Warning._message">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Tool.Warning.Message">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Tool.Warning.TraceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Tool.Warning.Code">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Tool.Warning.Level">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.Tool.Warning.StackTrace">
            <summary>
            堆栈跟踪
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.WinForm.AutoSizeFormHelper">
             <summary>
             窗体控件自适应大小
            <para>eg:</para>
            <para> private void FormMain_SizeChanged(object sender, EventArgs e)</para>
            <para>{</para>
            <para>  As.controlAutoSize(this);</para>
            <para>}</para>
             </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.WinForm.AutoSizeFormHelper.oldCtrl">
            <summary>
            记录的始终是当前的大小
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.AutoSizeFormHelper.ControllInitializeSize(System.Windows.Forms.Control)">
            <summary>
            记录窗体和其控件的初始位置和大小,
            </summary>
            <param name="form">Control</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.AutoSizeFormHelper.ControlAutoSize(System.Windows.Forms.Control)">
            <summary>
            控件自适应大小
            </summary>
            <param name="form">Control</param>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.WinForm.BindingListView`1">
            <summary>
            参考
            http://stackoverflow.com/questions/5378293/simplest-way-to-filter-generic-list
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.WinForm.BindingSourceHelper">
            <summary>
            BindingSource 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.BindingSourceHelper.GetBindingSource(System.Windows.Forms.Control)">
            <summary>
            获取Control的BindingSource
            </summary>
            <param name="control">Control</param>
            <returns>BindingSource</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.BindingSourceHelper.Remove``1(System.Windows.Forms.BindingSource,System.Predicate{``0})">
            <summary>
            从BindingSource中条件移出
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="dbSource">BindingSource</param>
            <param name="match">委托</param>
            <returns>条件移出个数</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.BindingSourceHelper.Find``1(System.Windows.Forms.BindingSource,System.Predicate{``0})">
            <summary>
             从BindingSource中条件查找
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="dbSource">BindingSource</param>
            <param name="match">委托</param>
            <returns>没有查找到则返回NULL</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.BindingSourceHelper.FindAll``1(System.Windows.Forms.BindingSource,System.Predicate{``0})">
            <summary>
             从BindingSource中条件查找集合
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="dbSource">BindingSource</param>
            <param name="match">委托</param>
            <returns>没有查找到则返回NULL</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.WinForm.CheckBoxHelper">
            <summary>
             CheckBox 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.CheckBoxHelper.SetCheckBoxTF(System.Windows.Forms.CheckBox,System.Boolean)">
            <summary>
            设置CheckBox是否选中，【线程安全】
            </summary>
            <param name="ck"></param>
            <param name="check"></param>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.WinForm.ComboBoxHelper">
            <summary>
            ComboBox 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ComboBoxHelper.Bind``1(System.Windows.Forms.ComboBox,System.Collections.Generic.IList{``0},System.String,System.String,System.String)">
            <summary>
             为ComboBox绑定数据源并提供下拉提示
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="combox">ComboBox</param>
            <param name="list">数据源</param>
            <param name="displayMember">显示字段</param>
            <param name="valueMember">隐式字段</param>
            <param name="displayText">下拉提示文字</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ComboBoxHelper.TransferCheckStatus(System.Func{System.Windows.Forms.CheckState,System.String},System.Windows.Forms.CheckBox[])">
            <summary>
            多个CheckBox的CheckState的转义
            </summary>
            <param name="transferHandler">委托</param>
            <param name="checkBox">CheckBox</param>
            <returns>转移结果</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ComboBoxHelper.BindCombox``1(System.Windows.Forms.ComboBox,System.Collections.Generic.IList{``0},System.String,System.String)">
            <summary>
            绑定ComboBox【线程安全】
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="combox">ComboBox</param>
            <param name="data">集合</param>
            <param name="displayMember">显示字段名称</param>
            <param name="valueMember">隐式子段名称</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ComboBoxHelper.GetSelectedIndexTF(System.Windows.Forms.ComboBox)">
            <summary>
            获取选中索引【线程安全】
            </summary>
            <param name="combox">ComboBox</param>
            <returns>选中索引</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ComboBoxHelper.OpComboBoxTF(System.Windows.Forms.ComboBox,System.Int32,System.Boolean)">
            <summary>
            设置选中索引，并且设置是否可用 【线程安全】
            </summary>
            <param name="cb">ComboBox</param>
            <param name="index">索引</param>
            <param name="enable">Enabled</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ComboBoxHelper.OpComboBoxTF(System.Windows.Forms.ComboBox,System.Int32)">
            <summary>
            设置选中索引【线程安全】
            </summary>
            <param name="cb">ComboBox</param>
            <param name="index">索引</param>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.WinForm.ControlHelper">
            <summary>
            基于.NET 2.0的Control工具类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ControlHelper.CreateControl(System.String,System.String)">
            <summary>
            根据名称空间以及控件名称创建对应的控件
            </summary>
            <param name="ctrlName">控件名称</param>
            <param name="ctrlNamespace">控件名称空间</param>
            <returns>创建的控件</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ControlHelper.CreateWinFormControl(System.String,System.String)">
            <summary>
            根据空间的名称空间以及控件名称创建控件
            </summary>
            <param name="ctrlName">控件名称</param>
            <param name="ctrlNamespace">控件名称空间</param>
            <returns>创建的控件</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ControlHelper.SetProperties(System.Windows.Forms.Control,System.Collections.Hashtable)">
            <summary>
            设置控件属性值
            </summary>
            <param name="ctrl">控件</param>
            <param name="ctrlPropertyList">包含空间属性和属性值的Hashtable</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ControlHelper.Clone(System.Windows.Forms.Control)">
            <summary>
            克隆控件
            </summary>
            <param name="ctrl">需要克隆的控件</param>
            <returns>返回克隆的控件</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ControlHelper.CloneTo``1(``0,``0)">
            <summary>
            同类别的控件克隆
            </summary>
            <typeparam name="T">空间类型</typeparam>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ControlHelper.CopyToClipBoard(System.Windows.Forms.Control)">
            <summary>
            将控件复制到放在剪贴板上
            </summary>
            <param name="ctrl">需要复制的控件</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ControlHelper.GetCtrlFromClipBoard">
            <summary>
            从剪切板获取控件
            </summary>
            <returns>Control</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ControlHelper.RemoveEvent(System.Windows.Forms.Control,System.String)">
            <summary>
            移除控件某个事件
            </summary>
            <param name="control">控件</param>
            <param name="eventName">需要移除的控件名称eg:EventClick</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ControlHelper.FindControl(System.Windows.Forms.Control,System.String)">
            <summary>
            按名称查找控件
            </summary>
            <param name="parentControl">查找控件的父容器控件</param>
            <param name="findCtrlName">查找控件名称</param>
            <returns>若没有查找到返回NULL</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ControlHelper.DownRecursiveFindControl(System.Windows.Forms.Control,System.String)">
            <summary>
            向下递归查找控件
            </summary>
            <param name="parentControl">查找控件的父容器控件</param>
            <param name="findCtrlName">查找控件名称</param>
            <returns>若没有查找到返回NULL</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ControlHelper.Cast``1(System.Windows.Forms.Control,System.Boolean@)">
            <summary>
            将Control转换某种控件类型
            </summary>
            <typeparam name="T">控件类型</typeparam>
            <param name="control">Control</param>
            <param name="result">转换结果</param>
            <returns>若成功则返回控件；若失败则返回NULL</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ControlHelper.AddControl``2(``0,``1)">
            <summary>
            向容器控件中添加控件
            </summary>
            <typeparam name="C">泛型</typeparam>
            <typeparam name="T">泛型</typeparam>
            <param name="c">容器控件</param>
            <param name="t">添加控件</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ControlHelper.SetTextTF``1(``0,System.String)">
            <summary>
            设置控件Text【线程安全】
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="t">控件</param>
            <param name="txt">Text</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ControlHelper.SetEnableTF``1(``0,System.Boolean)">
            <summary>
            设置控件Enabled【线程安全】
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="t">控件</param>
            <param name="enable">Enabled</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ControlHelper.SetTagTF``1(``0,System.Object)">
            <summary>
            设置控件的Tag属性【线程安全】
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="t">控件</param>
            <param name="tag">Tag</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ControlHelper.SetTextTagTF``1(``0,System.Object,System.String)">
            <summary>
            设置控件的Tag,Text属性【线程安全】
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="t">控件</param>
            <param name="tag">Tag</param>
            <param name="txt">Text</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ControlHelper.SetEnableTextTF``1(``0,System.Boolean,System.String)">
            <summary>
            设置控件的Enabled，Text属性【线程安全】
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="t">控件</param>
            <param name="enable">Enabled</param>
            <param name="txt">Text</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ControlHelper.SetVisibleTF``1(``0,System.Boolean)">
            <summary>
            设置控件的Visible属性【线程安全】
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="t">控件</param>
            <param name="visible">Visible</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ControlHelper.GetTagTF``1(``0)">
            <summary>
            获取控件的Tag属性【线程安全】
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="t">控件</param>
            <returns>object</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.WinForm.CustomControl.DataGridHeaderMerge">
             <summary>
            datagrid.ColumnHeadersHeight = 40;
            if (datagrid.ColumnHeadersHeightSizeMode != DataGridViewColumnHeadersHeightSizeMode.DisableResizing)
                datagrid.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.DisableResizing;
            datagrid.MergeColumnNames.Add("Column1");
            datagrid.AddSpanHeader(4, 2, "回路一");
            datagrid.MergeColumnNames.Add("Column2");
            datagrid.AddSpanHeader(6, 2, "回路二");
             </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.CustomControl.DataGridHeaderMerge.DrawCell(System.Windows.Forms.DataGridViewCellPaintingEventArgs)">
            <summary>
            画单元格
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.CustomControl.DataGridHeaderMerge.PaintingFont(System.Windows.Forms.DataGridViewCellPaintingEventArgs,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            画字符串
            </summary>
            <param name="e"></param>
            <param name="cellwidth"></param>
            <param name="UpRows"></param>
            <param name="DownRows"></param>
            <param name="count"></param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.CustomControl.DataGridHeaderMerge.AddSpanHeader(System.Int32,System.Int32,System.String)">
            <summary>
            合并列
            </summary>
            <param name="ColIndex">列的索引</param>
            <param name="ColCount">需要合并的列数</param>
            <param name="Text">合并列后的文本</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.CustomControl.DataGridHeaderMerge.ClearSpanInfo">
            <summary>
            清除合并的列
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.WinForm.CustomControl.DataGridHeaderMerge.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.CustomControl.DataGridHeaderMerge.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.CustomControl.DataGridHeaderMerge.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.WinForm.CustomControl.DataGridHeaderMerge.MergeColumnNames">
            <summary>
            设置或获取合并列的集合
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.WinForm.CustomControl.DataGridHeaderMerge.MergeColumnHeaderBackColor">
            <summary>
            二维表头的背景颜色
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.WinForm.DataGridCRUDHelper">
            <summary>
            DataGrid的添加，删除，修改，查询帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridCRUDHelper.ToBindList``1(System.Windows.Forms.DataGridView)">
            <summary>
            将绑定的数据源转换成IList
            仅仅适用DataGridCRUDToolV2Plus类下操作
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="gridView">DataGridView</param>
            <returns>IList</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridCRUDHelper.AddObject``1(System.Windows.Forms.DataGridView,``0)">
            <summary>
            为DataGridView添加行
            仅仅适用DataGridCRUDHelper类下操作
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="gridView">DataGridView</param>
            <param name="t">是否添加成功</param>
            <returns>操作是否成功</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridCRUDHelper.AddObject``1(System.Windows.Forms.DataGridView,System.Collections.Generic.IList{``0})">
            <summary>
             为DataGridView添加行
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="gridView">DataGridView</param>
            <param name="list">集合</param>
            <returns>操作是否成功</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridCRUDHelper.RemoveObject``1(System.Windows.Forms.DataGridView)">
            <summary>
            清除DataGridView所有的行
            仅仅适用DataGridCRUDHelper类下操作
            </summary>
            <param name="gridView">DataGridView</param>
            <returns>操作是否成功</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridCRUDHelper.RemoveObject``1(System.Windows.Forms.DataGridView,``0)">
            <summary>
            移出数据项
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="gridView">gridView</param>
            <param name="t">实体类</param>
            <returns>移出是否成功</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridCRUDHelper.RemoveObject``1(System.Windows.Forms.DataGridView,System.Predicate{``0})">
            <summary>
            移出数据项
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="gridView">gridView</param>
            <param name="match">条件委托</param>
            <returns>移出行数</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridCRUDHelper.Exist``1(System.Windows.Forms.DataGridView,System.String,System.Object)">
            <summary>
            判断某列等于某个值是否存在
            </summary>
            <param name="gridView">DataGridView</param>
            <param name="columnName">列名称</param>
            <param name="key">列值</param>
            <returns>存在返回True;不存在返回FASLE</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridCRUDHelper.Where``1(System.Windows.Forms.DataGridView,System.Predicate{``0})">
            <summary>
            获取符合条件的数据条数
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="gridView">DataGridView</param>
            <param name="match">Predicate委托</param>
            <returns>返回符合项目;</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridCRUDHelper.Find``1(System.Windows.Forms.DataGridView,System.String,System.Object)">
            <summary>
            根据字段名称以及值查找对应的实体类
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="gridView">DataGridView</param>
            <param name="columnName">列名称</param>
            <param name="key">列值</param>
            <returns>没有查到返回NULL</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridCRUDHelper.Find``1(System.Windows.Forms.DataGridView,System.Predicate{``0})">
            <summary>
            条件查找实体类
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="gridView">DataGridView</param>
            <param name="match">Predicate</param>
            <returns>没有查到返回NULL</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridCRUDHelper.FindAll``1(System.Windows.Forms.DataGridView,System.Predicate{``0})">
            <summary>
            查找所有合法条件的数据集合
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="gridView">DataGridView</param>
            <param name="match">Predicate为何</param>
            <returns>返回符合数据;没有合法的返回NULL</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridCRUDHelper.Filter``1(System.Windows.Forms.DataGridView,System.String)">
             <summary>
             数据筛选
            <para>eg:dataGridView1.Filter("Age = 18");</para>
             </summary>
             <typeparam name="T">泛型</typeparam>
             <param name="gridView">DataGridView</param>
             <param name="filter">筛选条件</param>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.WinForm.DataGridHelper">
            <summary>
            DataGrid 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridHelper.SetBindingSource``1(System.Windows.Forms.DataGridView,System.Collections.Generic.IList{``0})">
            <summary>
            DataGridView SetBindingSource
            </summary>
            <typeparam name="T">IList</typeparam>
            <param name="dataGrid">dataGrid</param>
            <param name="source">泛型</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridHelper.BindTF(System.Windows.Forms.DataGridView,System.Data.DataTable)">
            <summary>
            DataGridView绑定，线程安全
            </summary>
            <param name="dataGrid">DataGridView</param>
            <param name="dt">DataTable</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridHelper.Bind(System.Windows.Forms.DataGridView,System.Data.DataTable)">
            <summary>
            DataGridView绑定。
            </summary>
            <param name="dataGrid">DataGridView</param>
            <param name="dt">DataTable</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridHelper.Bind``1(System.Windows.Forms.DataGridView,System.Collections.Generic.IList{``0})">
            <summary>
            DataGridView绑定，线程安全
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="dataGrid">DataGridView对象</param>
            <param name="t">数据源</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridHelper.BindTF``1(System.Windows.Forms.DataGridView,System.Collections.Generic.IList{``0})">
            <summary>
            DataGridView绑定，线程安全
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="dataGrid">DataGridView</param>
            <param name="t">集合</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridHelper.GetCellValue(System.Windows.Forms.DataGridView,System.Int32,System.Int32)">
            <summary>
            根据行列获取值
            </summary>
            <param name="dataGrid">DataGridView对象</param>
            <param name="rowIndex">行数</param>
            <param name="columnIndex">列数</param>
            <returns>获取值</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridHelper.GetCellValueTF(System.Windows.Forms.DataGridView,System.Int32,System.Int32)">
            <summary>
            根据行列获取值『线程安全』
            </summary>
            <param name="dataGrid">DataGridView对象</param>
            <param name="rowIndex">行数</param>
            <param name="columnIndex">列数</param>
            <returns>获取值</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridHelper.SetCellValueTF(System.Windows.Forms.DataGridView,System.Int32,System.Int32,System.Object)">
            <summary>
            根据行列设置值『线程安全』
            </summary>
            <param name="dataGrid">DataGridView对象</param>
            <param name="rowIndex">行数</param>
            <param name="columnIndex">列数</param>
            <param name="cellValue">设置的数值</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridHelper.SetCellValue(System.Windows.Forms.DataGridView,System.Int32,System.Int32,System.Object)">
            <summary>
            根据行列设置值
            </summary>
            <param name="dataGrid">DataGridView对象</param>
            <param name="rowIndex">行数</param>
            <param name="columnIndex">列数</param>
            <param name="cellValue">设置的数值</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridHelper.GetCellValueTF(System.Windows.Forms.DataGridView,System.Int32,System.String)">
            <summary>
            根据行数列名获取数值
            </summary>
            <param name="dataGrid">DataGridView对象</param>
            <param name="rowIndex">行数</param>
            <param name="columnName">列名称</param>
            <returns></returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridHelper.GetCellValue(System.Windows.Forms.DataGridView,System.Int32,System.String)">
            <summary>
            获取列的值
            </summary>
            <param name="dataGrid">DataGridView</param>
            <param name="rowIndex">行索引</param>
            <param name="columnName">列名称</param>
            <returns>列值</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridHelper.CustomFormatting(System.Windows.Forms.DataGridView,System.Windows.Forms.DataGridViewCellFormattingEventArgs,System.String,System.Object)">
            <summary>
            cell格式化
            </summary>
            <param name="gridview">DataGridView</param>
            <param name="e">DataGridViewCellFormattingEventArgs</param>
            <param name="cellName">列名称</param>
            <param name="cellValue">列值</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridHelper.CustomFormatting(System.Windows.Forms.DataGridView,System.Windows.Forms.DataGridViewCellFormattingEventArgs,System.String,System.Object,System.Predicate{System.Object})">
            <summary>
            cell格式化
            </summary>
            <param name="gridview">DataGridView</param>
            <param name="e">DataGridViewCellFormattingEventArgs</param>
            <param name="cellName">列名称</param>
            <param name="cellFormatRule">委托</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridHelper.CustomFormatting(System.Windows.Forms.DataGridView,System.Windows.Forms.DataGridViewCellFormattingEventArgs,System.String,System.Action{System.Object})">
            <summary>
            cell格式化
            </summary>
            <param name="gridview">DataGridView</param>
            <param name="e">DataGridViewCellFormattingEventArgs</param>
            <param name="cellName">列名称</param>
            <param name="cellFormatRule">委托</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridHelper.SetCellValueTF(System.Windows.Forms.DataGridView,System.Int32,System.String,System.Object)">
            <summary>
            设置单元格数值。线程安全
            </summary>
            <param name="dataGrid">DataGridView</param>
            <param name="rowIndex">行</param>
            <param name="columnName">列名称</param>
            <param name="cellValue">单元格数值</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridHelper.SetCellValue(System.Windows.Forms.DataGridView,System.Int32,System.String,System.Object)">
            <summary>
            设置单元格数值
            </summary>
            <param name="dataGrid">DataGridView</param>
            <param name="rowIndex">行</param>
            <param name="columnName">列名称</param>
            <param name="cellValue">单元格数值</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridHelper.FilterTF(System.Windows.Forms.DataGridView,System.String,System.Object)">
            <summary>
            数据筛选【线程安全】
            </summary>
            <param name="dataGrid">DataGridView</param>
            <param name="columnName">筛选列名</param>
            <param name="value">筛选值</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridHelper.Filter(System.Windows.Forms.DataGridView,System.String,System.Object)">
            <summary>
            数据筛选
            </summary>
            <param name="dataGrid">DataGridView</param>
            <param name="columnName">筛选列名</param>
            <param name="value">筛选值</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridHelper.Filter(System.Windows.Forms.DataGridView,System.String,System.String)">
            <summary>
            根据筛选条件，返回所在行数
            </summary>
            <param name="dataGrid">DataGridView</param>
            <param name="columnName">所筛选的列名称</param>
            <param name="value">筛选数值</param>
            <returns>筛选成功：所在行数；若未找到则返回-1；</returns>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridHelper.LoopRows(System.Windows.Forms.DataGridView,System.Action{System.String,System.Object})">
            <summary>
            遍历行
            </summary>
            <param name="dataGrid">DataGridView</param>
            <param name="loopRowsRule">委托</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridHelper.LoopRows(System.Windows.Forms.DataGridView,System.Action{System.Windows.Forms.DataGridViewRow})">
            <summary>
            遍历行
            </summary>
            <param name="dataGrid">DataGridView</param>
            <param name="LoopRowsHanlder">委托</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridHelper.InsertColumnsTF``1(System.Windows.Forms.DataGridView,``0)">
            <summary>
            根据实体类类创建列名称【线程安全】
            </summary>
            <typeparam name="T">实体类类型</typeparam>
            <param name="dataGrid">DataGridView</param>
            <param name="t">实体类</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridHelper.InsertColumnsValueTF``1(System.Windows.Forms.DataGridView,``0,System.String,System.String)">
            <summary>
            根据实体类类创建列名称并填充数据
            </summary>
            <typeparam name="T">实体类类型</typeparam>
            <param name="dataGrid">DataGridView</param>
            <param name="t">实体类</param>
            <param name="keyColumn">匹配段列</param>
            <param name="keyValue">匹配的数值</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridHelper.DrawRowIndex(System.Windows.Forms.DataGridView,System.Windows.Forms.DataGridViewRowPostPaintEventArgs)">
            <summary>
            绘制行号，在RowPostPaint事件
            </summary>
            <param name="girdview">DataGridView</param>
            <param name="e">DataGridViewRowPostPaintEventArgs</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridHelper.AutoCellWidth(System.Windows.Forms.DataGridView)">
            <summary>
            根据cell内容调整其宽度
            </summary>
            <param name="girdview">DataGridView</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridHelper.CellToolTip(System.Windows.Forms.DataGridView,System.Action{System.Windows.Forms.DataGridViewCell})">
             <summary>
             设置cell的toolTip
            <para>eg:</para>
            <para>datagrid.CellToolTip((DataGridViewCell cell) =></para>
            <para>{</para>
            <para>    cell.ToolTipText = CSharpToolV2.WrapText(cell.Value.ToString(), 40);</para>
            <para>});</para>
             </summary>
             <param name="girdview">DataGridView</param>
             <param name="cellTooltipRule">委托</param>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.WinForm.CheckBoxClickedHandler">
            <summary>
            委托
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.WinForm.DataGridViewCheckBoxHeaderCellEventArgs">
            <summary>
            DataGridViewCheckBoxHeaderCellEventArgs
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DataGridViewCheckBoxHeaderCellEventArgs.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="check">是否选中</param>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.WinForm.DataGridViewCheckBoxHeaderCellEventArgs.Checked">
            <summary>
            选中状态
            </summary>
        </member>
        <!-- 对于成员“T:YanZhiwei.DotNet2.Utilities.WinForm.DatagridViewCheckBoxHeaderCellHelper”忽略有格式错误的 XML 注释 -->
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DatagridViewCheckBoxHeaderCellHelper.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DatagridViewCheckBoxHeaderCellHelper.Paint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DataGridViewElementStates,System.Object,System.Object,System.String,System.Windows.Forms.DataGridViewCellStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewPaintParts)">
            <summary>
            Paint 重写
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.DatagridViewCheckBoxHeaderCellHelper.OnMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)">
            <summary>
            OnMouseClick 重写
            </summary>
            <param name="e">DataGridViewCellMouseEventArgs</param>
        </member>
        <member name="E:YanZhiwei.DotNet2.Utilities.WinForm.DatagridViewCheckBoxHeaderCellHelper.OnCheckBoxClicked">
            <summary>
            勾选事件
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.WinForm.ExtendedForm.ExtendedResource">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.WinForm.ExtendedForm.ExtendedResource.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.WinForm.ExtendedForm.ExtendedResource.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:YanZhiwei.DotNet2.Utilities.WinForm.ExtendedForm.ExtendedResource.Loading">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="F:YanZhiwei.DotNet2.Utilities.WinForm.ExtendedForm.SplashForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ExtendedForm.SplashForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ExtendedForm.SplashForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.WinForm.ListBoxHelper">
            <summary>
            ListBox 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ListBoxHelper.ItemToolTip(System.Windows.Forms.ListBox,System.Windows.Forms.ToolTip,System.Windows.Forms.MouseEventArgs)">
            <summary>
            为ListBox提供tooltip
            </summary>
            <param name="lsbox">ListBox</param>
            <param name="toolTip">ToolTip</param>
            <param name="e">MouseEventArgs</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ListBoxHelper.ItemRightContxtMenu(System.Windows.Forms.ListBox,System.Windows.Forms.MouseEventArgs,System.Windows.Forms.ContextMenuStrip)">
            <summary>
            item选项右键菜单(MouseUp事件中)
            </summary>
            <param name="lsbox">ListBox</param>
            <param name="e">MouseUp</param>
            <param name="contxtMenu">ContextMenuStrip</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ListBoxHelper.ItemMoveUp(System.Windows.Forms.ListBox)">
            <summary>
            ITEM上移动，适合不是datasource绑定情况
            </summary>
            <param name="lsbox">ListBox</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ListBoxHelper.ItemMoveDown(System.Windows.Forms.ListBox)">
            <summary>
            ITEM下移动，适合不是datasource绑定情况
            </summary>
            <param name="lsbox"></param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ListBoxHelper.AddItemTF(System.Windows.Forms.ListBox,System.Object)">
            <summary>
            添加Items【线程安全】
            </summary>
            <param name="ls">ListBox</param>
            <param name="item">object</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ListBoxHelper.AddItemTF(System.Windows.Forms.ListBox,System.Object,System.Boolean)">
            <summary>
            添加Items,并且设置是否选中【线程安全】
            </summary>
            <param name="ls">ListBox</param>
            <param name="item">object</param>
            <param name="selectedIndex">是否选中</param>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.WinForm.MenuStripBuildeHelper">
            <summary>
            MenuStrip创建 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.MenuStripBuildeHelper.#ctor(System.Object,System.Windows.Forms.MenuStrip,System.Collections.Generic.IList{YanZhiwei.DotNet2.Utilities.Models.MenuStripItem})">
            <summary>
            构造函数
            </summary>
            <param name="instance">Type</param>
            <param name="menuStrip">MenuStrip</param>
            <param name="menuItems">MenuStrip数据集合</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.MenuStripBuildeHelper.BuilderMenuItem">
            <summary>
            创建MenuStrip
            </summary>>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.WinForm.MenuStripHelper">
            <summary>
            MenuStrip 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.MenuStripHelper.LoopMenuItem(System.Windows.Forms.MenuStrip,System.Action{System.Windows.Forms.ToolStripMenuItem})">
            <summary>
            遍历MenuStrip控件
            </summary>
            <param name="menu">MenuStrip</param>
            <param name="loopMenuRule">遍历的时候动作『委托』</param>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.WinForm.MessageHelper">
            <summary>
            Message 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.MessageHelper.ShowInfo(System.String)">
            <summary>
            一般提示信息
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.MessageHelper.ShowInfo(System.String,System.String)">
            <summary>
            一般提示信息
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.MessageHelper.ShowWarning(System.String,System.String)">
            <summary>
            警告信息
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.MessageHelper.ShowWarning(System.String)">
            <summary>
            警告信息
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.MessageHelper.ShowError(System.String,System.String)">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.MessageHelper.ShowError(System.String)">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.MessageHelper.ShowYesNoAndError(System.String)">
            <summary>
            显示询问用户信息，并显示错误标志
            </summary>
            <param name="message">错误信息</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.MessageHelper.ShowYesNoAndTips(System.String)">
            <summary>
            显示询问用户信息，并显示提示标志
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.MessageHelper.ShowYesNoAndWarning(System.String)">
            <summary>
            显示询问用户信息，并显示警告标志
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.MessageHelper.ShowYesNoCancelAndInfo(System.String)">
            <summary>
            显示询问用户信息，并显示提示标志
            </summary>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.WinForm.NotepadHelper">
            <summary>
             Notepad 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.NotepadHelper.ShowMessage(System.String,System.String)">
            <summary>
            打开记事本，并往记事本写入内容
            </summary>
            <param name="message">记事本内容</param>
            <param name="title">记事本名称</param>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.WinForm.NumericUpDownHelper">
            <summary>
            NumericUpDown 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.NumericUpDownHelper.SetSafeValue(System.Windows.Forms.NumericUpDown,System.Decimal)">
            <summary>
            设置NumericUpDown值前，判断是否大于或者小于其控件本身maxvalue,minValue；
            </summary>
            <param name="numericUpDown">NumericUpDown</param>
            <param name="value">数值</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.NumericUpDownHelper.OpNumericUpDownTF(System.Windows.Forms.NumericUpDown,System.Decimal)">
            <summary>
            设置NumericUpDown值【线程安全】
            </summary>
            <param name="updown">NumericUpDown</param>
            <param name="value">数值</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.RadioButtonHelper.OpRadioButtonTF(System.Windows.Forms.RadioButton,System.Boolean)">
            <summary>
            设置RadioButton是否选中【线程安全】
            </summary>
            <param name="rb">RadioButton</param>
            <param name="check">是否选中</param>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.WinForm.RichTextBoxHelper">
            <summary>
            RichTextBox 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.RichTextBoxHelper.SetTextFocused(System.Windows.Forms.RichTextBox,System.String,System.String)">
            <summary>
            设置RichTextBox的值，并且设置焦点最最后
            </summary>
            <param name="richText">RichTextBox</param>
            <param name="text">文本内容</param>
            <param name="splitCharacter">分隔符</param>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.WinForm.TabControlHelper">
            <summary>
            TabControl 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.TabControlHelper.SetTabPagesVisible(System.Windows.Forms.TabControl,System.Windows.Forms.TabPage)">
            <summary>
            显示TabPage
            </summary>
            <param name="tabControl">TabControl对象</param>
            <param name="tabpage">需要显示的TabPage</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.TabControlHelper.SetTabPagesVisible(System.Windows.Forms.TabControl,System.Windows.Forms.TabPage[])">
            <summary>
            显示TabPage
            </summary>
            <param name="tabControl">TabControl对象</param>
            <param name="tabpage">需要显示的TabPage集合</param>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.WinForm.TextBoxHelper">
            <summary>
            TextBox 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.TextBoxHelper.SetWatermark(System.Windows.Forms.TextBox,System.String)">
            <summary>
            为TextBox设置水印文字
            </summary>
            <param name="textBox">TextBox</param>
            <param name="watermark">水印文字</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.TextBoxHelper.ClearWatermark(System.Windows.Forms.TextBox)">
            <summary>
            清除水印文字
            </summary>
            <param name="textBox">TextBox</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.TextBoxHelper.OnlyInputNumber(System.Windows.Forms.TextBox)">
            <summary>
            只能输入数字
            </summary>
            <param name="textBox">TextBox</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.TextBoxHelper.OnlyInputFloat(System.Windows.Forms.TextBox)">
            <summary>
            只能输入正浮点型数字
            </summary>
            <param name="textBox">TextBox</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.TextBoxHelper.GetTextValueTF(System.Windows.Forms.TextBox)">
            <summary>
            获取TextBox的数值【线程安全】
            </summary>
            <param name="txtbox">TextBox</param>
            <returns>TextBox的数值</returns>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.WinForm.ThreadHelper">
            <summary>
            UI线程帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ThreadHelper.UIThread(System.Windows.Forms.Control,System.Windows.Forms.MethodInvoker)">
            <summary>
            控件线程安全
            </summary>
            <param name="control">Control</param>
            <param name="code">委托</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.ThreadHelper.UIThread``1(``0,System.Action{``0})">
            <summary>
            控件先线程安全
            参考:http://www.codeproject.com/Articles/37413/A-Generic-Method-for-Cross-thread-Winforms-Access#xx3867544xx
            </summary>
            <typeparam name="T">Control</typeparam>
            <param name="cont">Control</param>
            <param name="action">委托</param>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.WinForm.TooltipHelper">
            <summary>
            Tooltip 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.TooltipHelper.ShowTooltip(System.Windows.Forms.Control,System.Windows.Forms.ToolTip,System.String)">
            <summary>
            为控件提供Tooltip
            </summary>
            <param name="control">控件</param>
            <param name="tip">ToolTip</param>
            <param name="message">提示消息</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.TooltipHelper.ShowTooltip(System.Windows.Forms.Control,System.Windows.Forms.ToolTip,System.String,System.Int32)">
            <summary>
            为控件提供Tooltip
            </summary>
            <param name="control">控件</param>
            <param name="tip">ToolTip</param>
            <param name="message">提示消息</param>
            <param name="durationTime">保持提示的持续时间</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.TooltipHelper.ShowTooltip(System.Windows.Forms.Control,System.Windows.Forms.ToolTip,System.String,System.Int32,System.Int32)">
            <summary>
            为控件提供Tooltip
            </summary>
            <param name="control">控件</param>
            <param name="tip">ToolTip</param>
            <param name="message">提示消息</param>
            <param name="xoffset">水平偏移量</param>
            <param name="yoffset">垂直偏移量</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.TooltipHelper.ShowTooltip(System.Windows.Forms.Control,System.Windows.Forms.ToolTip,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            为控件提供Tooltip
            </summary>
            <param name="control">控件</param>
            <param name="tip">ToolTip</param>
            <param name="message">提示消息</param>
            <param name="xoffset">水平偏移量</param>
            <param name="yoffset">垂直偏移量</param>
            <param name="durationTime">保持提示的持续时间</param>
        </member>
        <member name="T:YanZhiwei.DotNet2.Utilities.WinForm.WebBrowserHelper">
            <summary>
             WebBrowser 帮助类
            </summary>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.WebBrowserHelper.InsertCookie(System.Windows.Forms.WebBrowser,System.String,System.Net.Cookie)">
            <summary>
            WebBrowser添加cookie
            </summary>
            <param name="webBrowser">WebBrowser</param>
            <param name="url">url</param>
            <param name="cookie">cookie</param>
        </member>
        <member name="M:YanZhiwei.DotNet2.Utilities.WinForm.WebBrowserHelper.GetCookieContainer(System.Windows.Forms.WebBrowser)">
            <summary>
            从WebBrowser中获取CookieContainer
            </summary>
            <param name="webBrowser">WebBrowser对象</param>
            <returns>CookieContainer</returns>
        </member>
    </members>
</doc>